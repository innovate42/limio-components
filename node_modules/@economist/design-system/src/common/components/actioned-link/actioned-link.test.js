import React from 'react';
import { shallow } from 'enzyme';
import ActionedLink from './actioned-link';

describe('<ActionedLink />', () => {
  const href = 'www.test.com';

  it('should render the correct default props', () => {
    const component = shallow(<ActionedLink href={href} icon='add' />);
    expect(component.find('span').text()).toEqual('');
    expect(component.find('a').props().className).toEqual(
      'ds-actioned-link ds-actioned-link--add',
    );
  });

  it('should render the href it is passed', () => {
    const component = shallow(<ActionedLink href={href} icon='add' />);
    expect(component.find('a').props().href).toEqual(href);
  });

  it('should render the minor classname if passed minor as a prop', () => {
    const component = shallow(<ActionedLink href={href} minor icon='add' />);
    expect(component.find('a').props().className).toEqual(
      'ds-actioned-link ds-actioned-link--minor ds-actioned-link--add',
    );
  });

  it('should render the correct classname if passed reuse-this-content as a prop', () => {
    const component = shallow(
      <ActionedLink href={href} icon='reuse-this-content' />,
    );
    expect(component.find('a').props().className).toEqual(
      'ds-actioned-link ds-actioned-link--reuse-this-content',
    );
  });

  it('should render the correct classname if passed the-trust-project as a prop', () => {
    const component = shallow(
      <ActionedLink href={href} icon='the-trust-project' />,
    );
    expect(component.find('a').props().className).toEqual(
      'ds-actioned-link ds-actioned-link--the-trust-project',
    );
  });

  it('should render the correct classname if passed watch as a prop', () => {
    const component = shallow(<ActionedLink href={href} icon='watch' />);
    expect(component.find('a').props().className).toEqual(
      'ds-actioned-link ds-actioned-link--watch',
    );
  });

  it('should render the correct classname if passed listen as a prop', () => {
    const component = shallow(<ActionedLink href={href} icon='listen' />);
    expect(component.find('a').props().className).toEqual(
      'ds-actioned-link ds-actioned-link--listen',
    );
  });

  it('should render the correct classname if passed edit as a prop', () => {
    const component = shallow(<ActionedLink href={href} icon='edit' />);
    expect(component.find('a').props().className).toEqual(
      'ds-actioned-link ds-actioned-link--edit',
    );
  });

  it('should render the correct classname if passed add as a prop', () => {
    const component = shallow(<ActionedLink href={href} icon='add' />);
    expect(component.find('a').props().className).toEqual(
      'ds-actioned-link ds-actioned-link--add',
    );
  });

  it('should render the correct classname if passed download as a prop', () => {
    const component = shallow(<ActionedLink href={href} icon='download' />);
    expect(component.find('a').props().className).toEqual(
      'ds-actioned-link ds-actioned-link--download',
    );
  });

  it('should render the correct classname if passed remove as a prop', () => {
    const component = shallow(<ActionedLink href={href} icon='remove' />);
    expect(component.find('a').props().className).toEqual(
      'ds-actioned-link ds-actioned-link--remove',
    );
  });

  it('should render the component with a <button> tag', () => {
    const component = shallow(<ActionedLink type='button' icon='gift' />);
    expect(component.find('a').props().className).toEqual(
      'ds-actioned-link ds-actioned-link--gift',
    );
  });

  it('should render a disabled button', () => {
    const component = shallow(
      <ActionedLink as='button' icon='gift' disabled />,
    );
    expect(component.find('button').props().disabled).toEqual(true);
  });

  it('should render a non-disabled button', () => {
    const component = shallow(<ActionedLink as='button' icon='gift' />);
    expect(component.find('button').props().disabled).toEqual(false);
  });
});
