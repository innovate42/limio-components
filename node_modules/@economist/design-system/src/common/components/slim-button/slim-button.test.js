import React from 'react';
import { shallow } from 'enzyme';
import SlimButton from './slim-button';

describe('<SlimButton />', () => {
  it('should render the correct default props', () => {
    const component = shallow(<SlimButton>Slim button</SlimButton>);
    expect(component.find('button').props().type).toEqual('button');
    expect(component.props().className).toEqual('ds-slim-button');
    expect(component.props().disabled).toEqual(false);
  });

  it('should render the text', () => {
    const component = shallow(<SlimButton>Slim button</SlimButton>);
    expect(component.find('button').text()).toEqual('Slim button');
  });

  it('should render a disabled attribute if its passed', () => {
    const component = shallow(<SlimButton disabled>Slim button</SlimButton>);
    expect(component.find('button').props().disabled).toEqual(true);
  });

  it('should render inverse classname if inverse prop is passed', () => {
    const component = shallow(<SlimButton inverse>Slim button</SlimButton>);
    expect(component.find('button').props().className).toEqual(
      'ds-slim-button ds-slim-button--inverse',
    );
  });

  it('should render secondary classname if secondary prop is passed', () => {
    const component = shallow(<SlimButton secondary>Slim button</SlimButton>);
    expect(component.find('button').props().className).toEqual(
      'ds-slim-button ds-slim-button--secondary',
    );
  });

  it('should render secondary inverse classname if inverse and secondary props are passed', () => {
    const component = shallow(
      <SlimButton secondary inverse>
        Slim button
      </SlimButton>,
    );
    expect(component.find('button').props().className).toEqual(
      'ds-slim-button ds-slim-button--secondary ds-slim-button--inverse',
    );
  });

  it('should render icon classname if icon props is passed', () => {
    const component = shallow(<SlimButton icon>Slim button</SlimButton>);
    expect(component.find('button').props().className).toEqual(
      'ds-slim-button ds-slim-button--icon',
    );
  });

  it('should render submit type if submit is passed as a type props', () => {
    const component = shallow(
      <SlimButton type='submit'>Slim button</SlimButton>,
    );
    expect(component.find('button').props().type).toEqual('submit');
  });

  it('should render reset type if reset is passed as a type props', () => {
    const component = shallow(
      <SlimButton type='reset'>Slim button</SlimButton>,
    );
    expect(component.find('button').props().type).toEqual('reset');
  });

  it('should render additonal props that are passed', () => {
    const component = shallow(
      <SlimButton addionalProp='additional prop'>Slim button</SlimButton>,
    );
    expect(component.find('button').props().addionalProp).toEqual(
      'additional prop',
    );
  });
});
