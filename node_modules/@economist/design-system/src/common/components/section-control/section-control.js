import React, { createRef, useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import 'reset-css/reset.css';
import '../color/color';
import '../grid/grid';
import '../interactions/interactions';
import '../rule/rule';
import '../typography/typography';
import css from './section-control.css';
import { keyCodes } from '../../constants';

/* TODO: when stable version of Edge 76 (currently in Beta) gets released:
   remove (polyfill for Edge 12 - 18 versions which don't support Details & Summary elements)
   including: all logic including detailRef, stateChanges, effects, functions, keyCode
   all attributes on the summary element including aria-expanded, role, tabIndex & event handlers
   className on expandable-details & CSS
    */

const SectionControl = ({ children, inverse, sectionTitle }) => {
  const detailsRef = createRef();
  const [expanded, setExpanded] = useState(false);

  useEffect(() => {
    const hasOpen = !(detailsRef.current.getAttribute('open') === null);

    if (expanded && !hasOpen) {
      detailsRef.current.setAttribute('open', 'open');
    }
    if (!expanded && hasOpen) {
      detailsRef.current.removeAttribute('open');
    }
  });

  function toggle() {
    setExpanded(!expanded);
  }

  function handleKeyDown(ev) {
    if (ev.keyCode === keyCodes.SPACE) {
      toggle(ev);
    }
  }

  return (
    <details
      className={classnames(css['ds-section-control'], {
        [css['ds-section-control--inverse']]: inverse,
      })}
      ref={detailsRef}
    >
      <summary
        onClick={toggle}
        onKeyDown={handleKeyDown}
        role='button'
        aria-expanded={expanded ? 'true' : 'false'}
        tabIndex='0'
      >
        <span>{sectionTitle}</span>
      </summary>
      <div
        className={classnames({
          [css['ds-section-control__content--closed']]: !expanded,
        })}
      >
        {children}
      </div>
    </details>
  );
};

SectionControl.defaultProps = {
  children: '',
  inverse: false,
};

SectionControl.propTypes = {
  children: PropTypes.node,
  inverse: PropTypes.bool,
  sectionTitle: PropTypes.string.isRequired,
};

export default SectionControl;
