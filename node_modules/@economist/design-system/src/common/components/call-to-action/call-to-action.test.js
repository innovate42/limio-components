import React from 'react';
import { shallow } from 'enzyme';
import CallToAction from './call-to-action';

describe('<CallToAction />', () => {
  const link = 'link';

  it('should render a call-to-action', () => {
    const callToAction = shallow(<CallToAction href={link} text='Subscribe' />);
    expect(callToAction.html()).not.toBe(null);
  });

  it('should display the correct text', () => {
    const callToAction = shallow(<CallToAction href={link} text='Subscribe' />);
    expect(callToAction.text()).toContain('Subscribe');
  });

  it('should render the correct link', () => {
    const callToAction = shallow(<CallToAction href={link} text='Subscribe' />);
    expect(callToAction.find('a').props().href).toEqual(link);
  });

  it('should render additional props', () => {
    const callToAction = shallow(<CallToAction text='Subscribe' test='test' />);
    expect(callToAction.find('a').props().test).toEqual('test');
  });

  it('should apply the correct classname if passed inverse as a prop', () => {
    const callToAction = shallow(
      <CallToAction href={link} text='Subscribe' inverse />,
    );
    expect(callToAction.find('a').props().className).toEqual(
      'ds-call-to-action ds-call-to-action--inverse',
    );
  });

  it('should apply the correct classname if passed secondary as a prop', () => {
    const callToAction = shallow(
      <CallToAction href={link} text='Subscribe' secondary />,
    );
    expect(callToAction.find('a').props().className).toEqual(
      'ds-call-to-action ds-call-to-action--secondary',
    );
  });

  it('should apply the correct classname if inverse and secondary props are passed', () => {
    const callToAction = shallow(
      <CallToAction href={link} text='Subscribe' secondary inverse />,
    );
    expect(callToAction.find('a').props().className).toEqual(
      'ds-call-to-action ds-call-to-action--secondary ds-call-to-action--inverse',
    );
  });
});
