/* eslint-disable no-magic-numbers */
import React from 'react';
import { mount, shallow } from 'enzyme';
import Pagination from './pagination';

describe('<Pagination />', () => {
  it('should render the correct default props', () => {
    const component = shallow(<Pagination totalPages={10} />);

    expect(
      component
        .find('ul')
        .childAt(0)
        .prop('id'),
    ).toBe('previous');
    expect(
      component
        .find('ul')
        .childAt(1)
        .prop('active'),
    ).toBe(true);
    expect(
      component
        .find('ul')
        .childAt(2)
        .prop('value'),
    ).toBe(2);
    expect(
      component
        .find('ul')
        .childAt(3)
        .prop('value'),
    ).toBe('...');
    expect(
      component
        .find('ul')
        .childAt(4)
        .prop('value'),
    ).toBe(10);
    expect(
      component
        .find('ul')
        .childAt(5)
        .prop('id'),
    ).toBe('next');
  });

  it('should render the correct current page', () => {
    const component = shallow(<Pagination currentPage={5} totalPages={10} />);
    expect(
      component
        .find('ul')
        .childAt(4)
        .props().active,
    ).toBe(true);
  });

  it('should render the correct number of page items', () => {
    const component = shallow(<Pagination currentPage={5} totalPages={10} />);
    expect(component.find('PaginationItem[id*="page-no"]').length).toEqual(5);
  });

  describe('handling clicks on', () => {
    describe('previous link', () => {
      it('should cap the argument of onPageChanged if currentPage is 1', () => {
        const mockFn = jest.fn();
        const component = mount(
          <Pagination currentPage={1} onPageChanged={mockFn} totalPages={10} />,
        );
        component
          .find('.ds-pagination__nav--previous')
          .find('.ds-pagination__nav-link')
          .simulate('click');
        expect(mockFn).toHaveBeenCalledWith(1);
      });
      it('should call onPageChanged with the previous page number', () => {
        const mockFn = jest.fn();
        const component = mount(
          <Pagination currentPage={2} onPageChanged={mockFn} totalPages={10} />,
        );
        component
          .find('.ds-pagination__nav--previous')
          .find('.ds-pagination__nav-link')
          .simulate('click');
        expect(mockFn).toHaveBeenCalledWith(1);
      });
    });

    describe('next link', () => {
      it('should cap the onPageChanged argument if currentPage is the last page', () => {
        const mockFn = jest.fn();
        const component = mount(
          <Pagination
            currentPage={10}
            onPageChanged={mockFn}
            totalPages={10}
          />,
        );
        component
          .find('.ds-pagination__nav--next')
          .find('.ds-pagination__nav-link')
          .simulate('click');
        expect(mockFn).toHaveBeenCalledWith(10);
      });
      it('should call onPageChanged with the previous page number', () => {
        const mockFn = jest.fn();
        const component = mount(
          <Pagination currentPage={2} onPageChanged={mockFn} totalPages={10} />,
        );
        component
          .find('.ds-pagination__nav--next')
          .find('.ds-pagination__nav-link')
          .simulate('click');
        expect(mockFn).toHaveBeenCalledWith(3);
      });
    });

    describe('page links', () => {
      it("should call onPageChanged with the clicked page's number", () => {
        const mockFn = jest.fn(() => 'test');
        const component = mount(
          <Pagination currentPage={1} onPageChanged={mockFn} totalPages={10} />,
        );
        const firstLink = component.find('.ds-pagination__item-link').first();
        expect(firstLink.text()).toEqual('2');
        firstLink.find('span').simulate('click');
        expect(mockFn).toHaveBeenCalledWith(2);
      });
    });

    describe('href builder', () => {
      it('should allow a function to programmatically set the href of the pagination links', () => {
        const mockFn = jest.fn(page => `https://website.com/page/${page}`);
        const component = mount(
          <Pagination currentPage={1} hrefBuilder={mockFn} totalPages={10} />,
        );
        const firstLink = component.find('.ds-pagination__item-link').first();
        const lastLink = component.find('.ds-pagination__item-link').last();
        expect(firstLink.props().href).toEqual('https://website.com/page/2');
        expect(lastLink.props().href).toEqual('https://website.com/page/10');
      });

      it('should set the href of the next and previous links', () => {
        const mockFn = jest.fn(page => `https://website.com/page/${page}`);
        const component = mount(
          <Pagination currentPage={2} hrefBuilder={mockFn} totalPages={10} />,
        );
        const prevLink = component.find('.ds-pagination__nav--previous > a');
        const nextLink = component.find('.ds-pagination__nav--next > a');
        expect(prevLink.props().href).toEqual('https://website.com/page/1');
        expect(nextLink.props().href).toEqual('https://website.com/page/3');
      });

      it('should not add a href to the previous link if on the first page', () => {
        const mockFn = jest.fn(page => `https://website.com/page/${page}`);
        const component = mount(
          <Pagination currentPage={1} hrefBuilder={mockFn} totalPages={10} />,
        );
        const prevLink = component.find('.ds-pagination__nav--previous > a');
        expect(prevLink.props().href).toEqual(undefined);
      });

      it('should not add a href to the next link if on the last page', () => {
        const mockFn = jest.fn(page => `https://website.com/page/${page}`);
        const component = mount(
          <Pagination currentPage={10} hrefBuilder={mockFn} totalPages={10} />,
        );
        const nextLink = component.find('.ds-pagination__nav--next > a');
        expect(nextLink.props().href).toEqual(undefined);
      });

      it('should default to ?page=x if no function passed', () => {
        const component = mount(<Pagination currentPage={0} totalPages={10} />);
        const firstLink = component.find('.ds-pagination__item-link').first();
        const lastLink = component.find('.ds-pagination__item-link').last();
        expect(firstLink.props().href).toEqual('?page=1');
        expect(lastLink.props().href).toEqual('?page=10');
      });
    });
  });
});
