import React from 'react';
import PropTypes from 'prop-types';
import 'reset-css/reset.css';
import '../color/color';
import '../grid/grid';
import '../interactions/interactions';
import '../typography/typography';
import css from './pagination.css';
import generatePagination from './generatePagination';
import PaginationItem from './pagination-item';

// pageNeighbours - indicates the number of additional page numbers to show on each side
// of the current page. The minimum value is 0. If not specified, it defaults to 1.
// Showing fewer pages optimises this component for smaller screens.

const Pagination = ({
  currentPage,
  totalPages,
  onPageChanged,
  pageNeighbours,
  hrefBuilder,
}) => {
  const isOnFirstPage = currentPage === 1;
  const isOnLastPage = currentPage === totalPages;

  // clamped previous/next pages to ensure we never call a page out of range
  const clampedPreviousPage = Math.max(1, currentPage - 1);
  const clampedNextPage = Math.min(totalPages, currentPage + 1);

  function handleClick(evt, value) {
    // Check if onPageChanged prop is actually passed to component to stop
    // preventDefault from overriding a regular href navigation, if provided
    // by hrefBuilder
    if (onPageChanged) {
      evt.preventDefault();
      onPageChanged(value);
    }
  }

  function handleClickEvent(evt) {
    handleClick(evt, Number(evt.currentTarget.getAttribute('data-value')));
  }

  function goToPrevious(evt) {
    handleClick(evt, clampedPreviousPage);
  }

  function goToNext(evt) {
    handleClick(evt, clampedNextPage);
  }

  const items = generatePagination(currentPage, totalPages, pageNeighbours).map(
    item => {
      const page = { ...item };
      page.href = hrefBuilder(page.value);
      page.onClick = handleClickEvent;
      page.label = page.active
        ? `Current page: ${page.value}`
        : `Go to page ${page.value}`;

      return page;
    },
  );

  // previous link props
  const previous = {
    id: 'previous',
    value: 'Previous',
    label: `Go to the previous page, ${clampedPreviousPage}`,
    edge: true,
    disabled: isOnFirstPage,
    href: hrefBuilder(clampedPreviousPage),
    onClick: goToPrevious,
  };

  // next link props
  const next = {
    id: 'next',
    value: 'Next',
    disabled: isOnLastPage,
    edge: true,
    label: `Go to the next page, ${clampedNextPage}`,
    href: hrefBuilder(clampedNextPage),
    onClick: goToNext,
  };

  const pages = [previous, ...items, next];

  return (
    <nav>
      <ul className={css['ds-pagination']}>
        {pages.map(page => (
          <PaginationItem key={page.id} {...page} />
        ))}
      </ul>
    </nav>
  );
};

Pagination.defaultProps = {
  currentPage: 1,
  pageNeighbours: 1,
  onPageChanged: null,
  hrefBuilder: i => `?page=${i}`,
};

Pagination.propTypes = {
  currentPage: PropTypes.number,
  totalPages: PropTypes.number.isRequired,
  pageNeighbours: PropTypes.number,
  onPageChanged: PropTypes.func,
  hrefBuilder: PropTypes.func,
};

export default Pagination;
