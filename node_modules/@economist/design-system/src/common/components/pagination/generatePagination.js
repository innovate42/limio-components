const Ellipsis = '...';
/**
 * Generates an array to be used for pagination
 * @param {number} current - The current page
 * @param {number} last - The last possible page in the paged list
 * @param {number} offset - Visible page numbers next to current page
 * @returns {array} List of desired page configuration with ellipsis for unimportant pages
 */
function generatePagination(current, last, offset = 2) {
  const leftOffset = current - offset;
  const rightOffset = current + offset + 1;

  /**
   * Reduces a list into the page numbers desired in the pagination
   * @param {array} accumulator - Growing list of desired page numbers
   * @param {*} _ - Throwaway variable to ignore the current value in iteration
   * @param {*} idx - The index of the current iteration
   * @returns {array} The accumulating list of desired page numbers
   */
  function reduceToDesiredPageNumbers(accumulator, _, idx) {
    const currIdx = idx + 1;

    if (
      // Always include first page
      currIdx === 1 ||
      // Always include last page
      currIdx === last ||
      // Include if index is between the above defined offsets
      (currIdx >= leftOffset && currIdx < rightOffset)
    ) {
      return [...accumulator, currIdx];
    }

    return accumulator;
  }

  /**
   * Transforms a list of desired pages and puts ellipsis in any gaps
   * @param {array} accumulator - The growing list of page numbers with ellipsis included
   * @param {number} currentPage - The current page in iteration
   * @param {number} currIdx - The current index
   * @param {array} src - The source array the function was called on
   * @returns {array} The accumulating list of desired page numbers
   */
  function transformToPagesWithEllipsis(
    accumulator,
    currentPage,
    currIdx,
    src,
  ) {
    const prev = src[currIdx - 1];

    // Ignore the first number, as we always want the first page
    // Include an ellipsis if there is a gap of more than one between numbers
    if (prev != null && currentPage - prev !== 1) {
      return [...accumulator, Ellipsis, currentPage];
    }

    // If page does not meet above requirement, just add it to the list
    return [...accumulator, currentPage];
  }

  const pageNumbers = [...Array(last).keys()].reduce(
    reduceToDesiredPageNumbers,
    [],
  );

  // Add additional properties to page number
  return pageNumbers
    .reduce(transformToPagesWithEllipsis, [])
    .map((page, index) => {
      const isEllipsis = page === Ellipsis;

      return {
        id: isEllipsis ? `ellipsis-${index}` : `page-no-${page}`,
        value: page,
        active: current === page,
        disabled: isEllipsis,
      };
    });
}

export default generatePagination;
