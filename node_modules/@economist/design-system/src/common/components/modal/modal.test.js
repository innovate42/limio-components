import React from 'react';
import { mount, shallow } from 'enzyme';
import Modal from './modal';
import { keyValues } from '../../constants';

describe('Modal', () => {
  const createComponent = (
    initialShowModalState = true,
    onClose = () => {},
  ) => {
    return () => (
      <Modal
        onClose={onClose}
        showModal={initialShowModalState}
        width='medium'
        ariaLabel='Test Modal'
      >
        <h1>Modal Title</h1>
        <input />
      </Modal>
    );
  };

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('Should render modal and its children when showModal prop is true', () => {
    // given
    const Component = createComponent();

    // when
    const component = mount(<Component />, { attachTo: document.body });

    // then
    expect(component.find('dialog').hasClass('ds-modal ds-modal--medium')).toBe(
      true,
    );
    expect(component.text()).toBe('Modal Title');
    expect(document.body.style.overflow).toEqual('hidden');

    // cleanup
    component.unmount();
  });

  it('Should return null when showModal prop is false', () => {
    // given
    const initialShowModalState = false;
    const Component = createComponent(initialShowModalState);

    // when
    const component = mount(<Component />, { attachTo: document.body });

    // then
    expect(component).toEqual({});
    expect(document.body.style.overflow).toEqual('visible');

    // cleanup
    component.unmount();
  });

  it('Should apply dark theme css if darkMode prop is true', () => {
    // given
    const props = {
      onClose: jest.fn(),
      showModal: true,
      width: 'medium',
      ariaLabel: 'Test Modal',
      darkMode: true,
    };

    // when
    const component = shallow(
      <Modal {...props}>
        <h1>Hello</h1>
      </Modal>,
    );

    // then
    expect(
      component
        .find('dialog')
        .hasClass('ds-modal ds-modal--medium ds-modal--dark-mode'),
    ).toBe(true);
  });

  it('Should call onClose if user clicks outside of the modal', () => {
    // given
    const initialShowModalState = true;
    const onClose = jest.fn();
    const Component = createComponent(initialShowModalState, onClose);

    // when
    const component = mount(
      <div>
        <Component />
        <textarea />
      </div>,
      { attachTo: document.body },
    );

    component
      .find('textarea')
      .instance()
      .dispatchEvent(new Event('click'));

    // then
    expect(onClose).toHaveBeenCalled();

    // cleanup
    component.unmount();
  });

  it('Should not call onClose if user clicks inside of the modal', () => {
    // given
    const initialShowModalState = true;
    const onClose = jest.fn();
    const Component = createComponent(initialShowModalState, onClose);

    // when
    const component = mount(
      <div>
        <Component />
        <textarea />
      </div>,
      { attachTo: document.body },
    );

    component
      .find('input')
      .instance()
      .dispatchEvent(new Event('click'));

    // then
    expect(onClose).not.toHaveBeenCalled();

    // cleanup
    component.unmount();
  });

  it('Should call onClose if Esc key is pressed', () => {
    // given
    const initialShowModalState = true;
    const onClose = jest.fn();
    const Component = createComponent(initialShowModalState, onClose);

    // when
    const component = mount(<Component />, { attachTo: document.body });

    window.dispatchEvent(new KeyboardEvent('keydown', { key: keyValues.ESC }));

    // then
    expect(onClose).toHaveBeenCalled();

    // cleanup
    component.unmount();
  });

  it('Should not call onClose if key other than Esc is pressed', () => {
    // given
    const initialShowModalState = true;
    const onClose = jest.fn();
    const Component = createComponent(initialShowModalState, onClose);

    // when
    const component = mount(<Component />, { attachTo: document.body });

    window.dispatchEvent(new KeyboardEvent('keydown', { key: keyValues.TAB }));

    // then
    expect(onClose).not.toHaveBeenCalled();

    // cleanup
    component.unmount();
  });
});
