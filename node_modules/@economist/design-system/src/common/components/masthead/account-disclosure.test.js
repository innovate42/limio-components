import React from 'react';
import { shallow } from 'enzyme';
import AccountDisclosure from './account-disclosure';

describe('<AccountDisclosure />', () => {
  const url = 'www.test.com';

  it('should render', () => {
    const component = shallow(<AccountDisclosure text='Text' href={url} />);
    expect(component.text()).toEqual('Text');
    expect(
      component
        .find('div')
        .at(1)
        .hasClass('ds-account-disclosure__avatar-text'),
    ).toBe(true);
    expect(component.find('.ds-account-disclosure__overlay').exists()).toEqual(
      false,
    );
  });

  it('should add inverse className when inverse is set', () => {
    const component = shallow(
      <AccountDisclosure inverse href={url} text='example text' />,
    );
    expect(component.find('button').hasClass('ds-account-disclosure')).toBe(
      true,
    );
    expect(
      component.find('button').hasClass('ds-account-disclosure--inverse'),
    ).toBe(true);
    expect(
      component
        .find('div')
        .at(0)
        .hasClass('ds-account-disclosure__avatar-initials'),
    ).toBe(true);
    expect(
      component
        .find('div')
        .at(0)
        .hasClass('ds-account-disclosure__avatar-initials--inverse'),
    ).toBe(true);
  });

  it('should not add inverse className when inverse is not set', () => {
    const component = shallow(
      <AccountDisclosure href={url} text='example text' />,
    );
    expect(component.find('button').hasClass('ds-account-disclosure')).toBe(
      true,
    );
  });

  it('should add selected className when selected is set', () => {
    const component = shallow(
      <AccountDisclosure expanded href={url} text='example text' />,
    );
    expect(component.find('button').hasClass('ds-account-disclosure')).toBe(
      true,
    );
    expect(
      component.find('button').hasClass('ds-account-disclosure is-selected'),
    ).toBe(true);
  });

  it('should add overlay when selected is set', () => {
    const component = shallow(
      <AccountDisclosure expanded href={url} text='example text' />,
    );
    expect(component.find('.ds-account-disclosure__overlay').exists()).toEqual(
      true,
    );
  });

  it('should call onClick when overlay is clicked', () => {
    const onClickMock = jest.fn();
    const component = shallow(
      <AccountDisclosure
        expanded
        href={url}
        text='example text'
        onClick={onClickMock}
      />,
    );
    component.find('.ds-account-disclosure__overlay').simulate('click');
    expect(onClickMock).toHaveBeenCalled();
  });

  it('should show initials when fullName is set', () => {
    const component = shallow(
      <AccountDisclosure
        href={url}
        text='example text'
        fullName='John Smith'
      />,
    );
    expect(
      component
        .find('div')
        .at(0)
        .find('svg').length,
    ).toEqual(0);
    expect(
      component
        .find('div')
        .at(0)
        .text(),
    ).toEqual('JS');
  });

  it('should add avatar when fullName is not set', () => {
    const component = shallow(
      <AccountDisclosure href={url} text='example text' />,
    );
    expect(
      component
        .find('div')
        .at(0)
        .find('svg').length,
    ).toEqual(1);
  });
});
