import { accountData } from '../../constants';

/**
 * Retrieve account data where links urls and links lists are configurable by consumers.
 * @param {string} [loginUrl] - login url
 * @param {string} [logoutUrl] - logout url
 * @param {string} [manageMyAccountUrl] - manage my account url
 * @param {string} [savedStoriesUrl] - saved stories url
 * @param {string} [gsClientAdminUrl] - group subscriptions client admin portal url
 * @param {string} [mySubscriptionUrl] - my subscription url
 * @param {string} [personalInfoUrl] - personal information url
 * @param {string} [billingUrl] - billing url
 * @param {string} [newslettersAndPreferencesUrl] - newsletters & preferences url
 * @param {string} [giftSubscriptionsUrl] - gift subscriptions url
 * @param {string} [helpUrl] - help url
 * @returns {object} account data
 */
const getAccountData = (
  loginUrl,
  logoutUrl,
  manageMyAccountUrl,
  savedStoriesUrl,
  gsClientAdminUrl,
  mySubscriptionUrl,
  personalInfoUrl,
  billingUrl,
  newslettersAndPreferencesUrl,
  giftSubscriptionsUrl,
  helpUrl,
) => {
  const processedAccountData = { ...accountData };

  // helper function for updating links lists and links urls. accountData const is used as a starting point
  // from which a copy is created and modified to get required output. Default urls are overridden if new ones
  // are provided as params. Links and related urls are removed if overriding urls are not provided except for
  // manage my account and saved stories links.
  const updateAccountLoggedInLinks = (url, linkName, linksListName) => {
    if (url) {
      const itemLink = processedAccountData[linksListName].find(
        link => link.name === linkName,
      );
      itemLink.url = url;
    } else if (
      linkName !== 'My Economist' &&
      linkName !== 'Saved stories' &&
      linkName !== 'Account'
    ) {
      // remove links for which url is not provided except for default my account and saved stories links
      processedAccountData[linksListName] = processedAccountData[
        linksListName
      ].filter(link => link.name !== linkName);
    }
  };

  if (loginUrl) {
    const logoutInLink = processedAccountData['account-logged-out'].find(
      link => link.name === 'Log in',
    );
    logoutInLink.url = loginUrl;
  }

  updateAccountLoggedInLinks(logoutUrl, 'Log out', 'account-logged-in');
  updateAccountLoggedInLinks(
    manageMyAccountUrl,
    'My Economist',
    'account-logged-in',
  );
  updateAccountLoggedInLinks(
    savedStoriesUrl,
    'Saved stories',
    'account-logged-in',
  );
  updateAccountLoggedInLinks(
    gsClientAdminUrl,
    'Admin account',
    'account-logged-in',
  );
  updateAccountLoggedInLinks(
    mySubscriptionUrl,
    'My subscription',
    'account-logged-in',
  );
  updateAccountLoggedInLinks(
    personalInfoUrl,
    'Personal information',
    'account-logged-in',
  );
  updateAccountLoggedInLinks(billingUrl, 'Billing', 'account-logged-in');
  updateAccountLoggedInLinks(
    newslettersAndPreferencesUrl,
    'Newsletters & preferences',
    'account-logged-in',
  );
  updateAccountLoggedInLinks(
    giftSubscriptionsUrl,
    'Gift subscriptions',
    'account-logged-in',
  );
  updateAccountLoggedInLinks(helpUrl, 'Help', 'account-logged-in');

  updateAccountLoggedInLinks(logoutUrl, 'Log out', 'account-logged-in-main');
  updateAccountLoggedInLinks(
    manageMyAccountUrl,
    'Account',
    'account-logged-in-main',
  );
  updateAccountLoggedInLinks(
    savedStoriesUrl,
    'Saved stories',
    'account-logged-in-main',
  );
  updateAccountLoggedInLinks(
    gsClientAdminUrl,
    'Admin account',
    'account-logged-in-main',
  );

  return processedAccountData;
};

export default getAccountData;
