/* eslint-disable react/jsx-no-bind, no-console */
import React from 'react';
import { mount, shallow } from 'enzyme';
import SkipToContent from './skip-to-content';

describe('<SkipToContent />', () => {
  beforeAll(() => {
    jest.spyOn(console, 'error').mockImplementation(() => jest.fn());
  });

  afterAll(() => {
    jest.restoreAllMocks();
  });

  it('should require targetId', () => {
    shallow(<SkipToContent>Slim button</SkipToContent>);
    expect(console.error).toHaveBeenCalledWith(
      expect.stringContaining(
        'The prop `targetId` is marked as required in `SkipToContent`',
      ),
    );
  });

  it('should render the text and class name', () => {
    const component = shallow(<SkipToContent>Skip to content</SkipToContent>);
    expect(component.props().className).toEqual('ds-skip-to-content');
    expect(component.find('a').text()).toEqual('Skip to content');
  });

  it('should render inverse classname if inverse prop is passed', () => {
    const component = shallow(
      <SkipToContent inverse>Skip to content</SkipToContent>,
    );
    expect(component.props().className).toEqual(
      'ds-skip-to-content ds-skip-to-content--inverse',
    );
  });

  describe('handleSkipLink()', () => {
    function createSkipStage(id) {
      return {
        wrapper: mount(
          <>
            <SkipToContent targetId={id}>Skip to content</SkipToContent>
            <div id='content'>
              Main Content
              <div id='inner-content'>Inner content</div>
            </div>
          </>,
          { attachTo: document.body },
        ),
        mainContent: document.getElementById('content'),
        innerContent: document.getElementById('inner-content'),
      };
    }

    afterEach(() => {
      // reset JSDOM
      document.querySelector('html').innerHTML = '';
    });

    it('should not add additional attributes to target element if not clicked', () => {
      const { mainContent } = createSkipStage('content');
      expect(mainContent.getAttribute('tabindex')).toBe(null);
      expect(mainContent.getAttribute('style')).toBe(null);
    });

    it('should add the correct attributes to target element if clicked', () => {
      const { wrapper, mainContent, innerContent } = createSkipStage('content');
      const preventDefaultMock = jest.fn();

      wrapper.find('SkipToContent').simulate('click', {
        preventDefault: preventDefaultMock,
      });

      expect(preventDefaultMock).toHaveBeenCalled();
      expect(mainContent.getAttribute('style')).toEqual('outline: 0;');
      expect(innerContent.getAttribute('style')).toEqual(null);
      expect(mainContent.getAttribute('tabindex')).toEqual('-1');
      expect(innerContent.getAttribute('tabindex')).toEqual(null);
    });

    it('should add the correct attributes to inner target element if clicked', () => {
      const { wrapper, mainContent, innerContent } = createSkipStage(
        'inner-content',
      );
      wrapper.find('SkipToContent').simulate('click');

      expect(innerContent.getAttribute('style')).toEqual('outline: 0;');
      expect(mainContent.getAttribute('style')).toEqual(null);
      expect(innerContent.getAttribute('tabindex')).toEqual('-1');
      expect(mainContent.getAttribute('tabindex')).toEqual(null);
    });

    it('should have the correct skip link href to target fragment', () => {
      const { wrapper } = createSkipStage('content');
      const linkNode = wrapper.find('SkipToContent').getDOMNode();
      expect(linkNode.getAttribute('href')).toEqual('#content');
    });

    it('should have the correct skip link href to inner target fragment', () => {
      const { wrapper } = createSkipStage('inner-content');
      const linkNode = wrapper.find('SkipToContent').getDOMNode();
      expect(linkNode.getAttribute('href')).toEqual('#inner-content');
    });

    it('should focus on the main content if clicked', () => {
      const { wrapper } = createSkipStage('content');
      wrapper.find('SkipToContent').simulate('click');

      expect(document.activeElement.id).toEqual('content');
    });

    it('should focus on the inner content if clicked', () => {
      const { wrapper } = createSkipStage('inner-content');
      wrapper.find('SkipToContent').simulate('click');

      expect(document.activeElement.id).toEqual('inner-content');
    });

    it('should remove the tab attribute on the target element on blur', () => {
      const { wrapper, mainContent } = createSkipStage('content');
      wrapper.find('SkipToContent').simulate('click');

      expect(mainContent.getAttribute('tabindex')).toEqual('-1');

      mainContent.blur();

      expect(mainContent.getAttribute('tabindex')).toBe(null);
    });

    it('should follow link href if no ID matches in DOM', () => {
      jest.spyOn(document, 'getElementById');
      const { wrapper } = createSkipStage('no-content');
      const preventDefaultMock = jest.fn();
      wrapper.find('SkipToContent').simulate('click', {
        preventDefault: preventDefaultMock,
      });

      expect(document.getElementById).toHaveBeenCalledWith('no-content');
      expect(preventDefaultMock).not.toHaveBeenCalled();
    });
  });
});
