import getAccountData from './account-data';

describe('getAccountData()', () => {
  describe('loginUrl provided', () => {
    const accountData = getAccountData('/login/test');

    describe('user is logged in', () => {
      it('should return the correct account data', () => {
        const data = accountData['account-logged-in'];
        const dataMain = accountData['account-logged-in-main'];

        expect(data[0].name).toEqual('My Economist');
        expect(data[0].url).toEqual('/my-economist');
        expect(data[1].name).toEqual('Saved stories');
        expect(data[1].url).toEqual('/saved-stories');
        expect(data.length).toEqual(2);

        expect(dataMain[0].name).toEqual('Saved stories');
        expect(dataMain[0].url).toEqual('/saved-stories');
        expect(dataMain[1].name).toEqual('Account');
        expect(dataMain[1].url).toEqual('/my-economist');
        expect(dataMain.length).toEqual(2);
      });
    });

    describe('user is logged out', () => {
      it('should return the correct account data', () => {
        const data = accountData['account-logged-out'];
        expect(data[0].name).toEqual('Log in');
        expect(data[0].url).toEqual('/login/test');
      });
    });
  });

  describe('logoutUrl is provided', () => {
    const accountData = getAccountData('', '/logout.test');

    it('should return logout information', () => {
      const data = accountData['account-logged-in'];
      const dataMain = accountData['account-logged-in-main'];

      expect(data[2].name).toEqual('Log out');
      expect(data[2].url).toEqual('/logout.test');
      expect(data.length).toEqual(3);

      expect(dataMain[2].name).toEqual('Log out');
      expect(dataMain[2].url).toEqual('/logout.test');
      expect(dataMain.length).toEqual(3);
    });
  });

  describe('override manage my account urls', () => {
    describe('overriding url not passed in', () => {
      it('should return the default url', () => {
        const accountData = getAccountData();
        const data = accountData['account-logged-in'];
        const dataMain = accountData['account-logged-in-main'];

        expect(data[0].name).toEqual('My Economist');
        expect(data[0].url).toEqual('/my-economist');
        expect(dataMain[1].name).toEqual('Account');
        expect(dataMain[1].url).toEqual('/my-economist');
      });
    });

    describe('overriding url passed in', () => {
      it('should return supplied url', () => {
        const overridingMmaUrl = 'https://my.account.test.com';
        const accountData = getAccountData('', '', overridingMmaUrl);
        const dataMain = accountData['account-logged-in-main'];

        const data = accountData['account-logged-in'];
        expect(data[0].name).toEqual('My Economist');
        expect(data[0].url).toEqual(overridingMmaUrl);
        expect(dataMain[1].name).toEqual('Account');
        expect(dataMain[1].url).toEqual(overridingMmaUrl);
      });
    });
  });

  describe('override saved stories urls', () => {
    describe('overriding url not passed in', () => {
      it('should return the default url', () => {
        const accountData = getAccountData();
        const data = accountData['account-logged-in'];
        const dataMain = accountData['account-logged-in-main'];

        expect(data[1].name).toEqual('Saved stories');
        expect(data[1].url).toEqual('/saved-stories');
        expect(dataMain[0].name).toEqual('Saved stories');
        expect(dataMain[0].url).toEqual('/saved-stories');
      });
    });

    describe('overriding url passed in', () => {
      it('should return supplied url', () => {
        const overridingSavedStoriesUrl = 'https://my.account.test.com';
        const accountData = getAccountData(
          '',
          '',
          '',
          overridingSavedStoriesUrl,
        );
        const dataMain = accountData['account-logged-in-main'];

        const data = accountData['account-logged-in'];
        expect(data[1].name).toEqual('Saved stories');
        expect(data[1].url).toEqual(overridingSavedStoriesUrl);
        expect(dataMain[0].name).toEqual('Saved stories');
        expect(dataMain[0].url).toEqual(overridingSavedStoriesUrl);
      });
    });
  });

  describe('gsClientAdminUrl is provided', () => {
    const accountData = getAccountData('', '', '', '', '/client-admin');

    it('should return client admin information', () => {
      const data = accountData['account-logged-in'];
      const dataMain = accountData['account-logged-in-main'];

      expect(data[2].name).toEqual('Admin account');
      expect(data[2].url).toEqual('/client-admin');
      expect(data.length).toEqual(3);

      expect(dataMain[1].name).toEqual('Admin account');
      expect(dataMain[1].url).toEqual('/client-admin');
      expect(dataMain.length).toEqual(3);
    });
  });

  describe('mySubscriptionUrl is provided', () => {
    const accountData = getAccountData('', '', '', '', '', '/my-subscription');

    it('should return my subscription information', () => {
      const data = accountData['account-logged-in'];
      const dataMain = accountData['account-logged-in-main'];

      expect(data[2].name).toEqual('My subscription');
      expect(data[2].url).toEqual('/my-subscription');
      expect(data.length).toEqual(3);

      expect(dataMain.length).toEqual(2);
    });
  });

  describe('personalInfoUrl is provided', () => {
    const accountData = getAccountData(
      '',
      '',
      '',
      '',
      '',
      '',
      '/personal-info',
    );

    it('should return personal information', () => {
      const data = accountData['account-logged-in'];
      const dataMain = accountData['account-logged-in-main'];

      expect(data[2].name).toEqual('Personal information');
      expect(data[2].url).toEqual('/personal-info');
      expect(data.length).toEqual(3);

      expect(dataMain.length).toEqual(2);
    });
  });

  describe('billingUrl is provided', () => {
    const accountData = getAccountData('', '', '', '', '', '', '', '/billing');

    it('should return billing information', () => {
      const data = accountData['account-logged-in'];
      const dataMain = accountData['account-logged-in-main'];

      expect(data[2].name).toEqual('Billing');
      expect(data[2].url).toEqual('/billing');
      expect(data.length).toEqual(3);

      expect(dataMain.length).toEqual(2);
    });
  });

  describe('newslettersAndPreferencesUrl is provided', () => {
    const accountData = getAccountData(
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '/newsletter-and-preferences',
    );

    it('should return newsletter and preferences information', () => {
      const data = accountData['account-logged-in'];
      const dataMain = accountData['account-logged-in-main'];

      expect(data[2].name).toEqual('Newsletters & preferences');
      expect(data[2].url).toEqual('/newsletter-and-preferences');
      expect(data.length).toEqual(3);

      expect(dataMain.length).toEqual(2);
    });
  });

  describe('giftSubscriptionsUrl is provided', () => {
    const accountData = getAccountData(
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '/gift-subscriptions',
    );

    it('should return gift subscriptions information', () => {
      const data = accountData['account-logged-in'];
      const dataMain = accountData['account-logged-in-main'];

      expect(data[2].name).toEqual('Gift subscriptions');
      expect(data[2].url).toEqual('/gift-subscriptions');
      expect(data.length).toEqual(3);

      expect(dataMain.length).toEqual(2);
    });
  });

  describe('helpUrl is provided', () => {
    const accountData = getAccountData(
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      '/help',
    );

    it('should return help information', () => {
      const data = accountData['account-logged-in'];
      const dataMain = accountData['account-logged-in-main'];

      expect(data[2].name).toEqual('Help');
      expect(data[2].url).toEqual('/help');
      expect(data.length).toEqual(3);

      expect(dataMain.length).toEqual(2);
    });
  });
});
