import React from 'react';
import { mount, shallow } from 'enzyme';
import FormFieldPassword from './form-field-password';
import FormInput from './form-input';

const handleOnChange = jest.fn();

describe('<FormFieldPassword />', () => {
  it('should pass default props to the FormFieldPassword component', () => {
    const component = shallow(
      <FormFieldPassword
        onChange={handleOnChange}
        helperText='Form helper text'
        labelText='Form label'
      />,
    );
    const formInput = component.find(FormInput);
    expect(formInput.props().disabled).toEqual(false);
    expect(formInput.props().placeholder).toEqual(null);
    expect(formInput.props().id).toEqual(null);
    expect(formInput.props().maxLength).toEqual(null);
    expect(formInput.props().name).toEqual(null);
    expect(formInput.props().value).toEqual('');
  });

  it('should pass props to a FormFieldPassword component', () => {
    const handleOnBlur = jest.fn();
    const maxLength = 10;

    const component = shallow(
      <FormFieldPassword
        disabled
        error='Error message'
        id='123'
        labelText='Form label'
        maxLength={maxLength}
        onBlur={handleOnBlur}
        onChange={handleOnChange}
        placeholder='Placeholder text'
        slim
        name='Field name'
        value='Text value'
      />,
    );
    const formInput = component.find(FormInput);
    expect(formInput.props().disabled).toBeDefined();
    expect(formInput.props().error).toEqual('Error message');
    expect(formInput.props().id).toEqual('123');
    expect(formInput.props().maxLength).toEqual(maxLength);
    expect(formInput.props().onChange).toEqual(handleOnChange);
    expect(formInput.props().placeholder).toEqual('Placeholder text');
    expect(formInput.props().slim).toEqual(true);
    expect(formInput.props().name).toEqual('Field name');
    expect(formInput.props().value).toEqual('Text value');
  });

  it('should pass additional props to the FormInput component', () => {
    const component = shallow(
      <FormFieldPassword
        foo='bar'
        id='123'
        labelTag='FORM TAG'
        labelText='Form label'
        onChange={handleOnChange}
      />,
    );
    expect(component.find(FormInput).props().foo).toEqual('bar');
  });

  it('should pass props to the FormLabel component', () => {
    const component = shallow(
      <FormFieldPassword
        id='123'
        labelTag='FORM TAG'
        labelText='Form label'
        onChange={handleOnChange}
      />,
    );
    const label = component.find('FormLabel');
    expect(label.props().htmlFor).toEqual('123');
    expect(label.props().text).toEqual('Form label');
    expect(label.props().tag).toEqual('FORM TAG');
  });

  it('should pass helper text prop to the FormHelperText component', () => {
    const component = shallow(
      <FormFieldPassword
        id='123'
        helperText='Form helper text'
        labelText='Form label'
        onChange={handleOnChange}
      />,
    );
    expect(component.find('FormHelperText').props().text).toEqual(
      'Form helper text',
    );
  });

  describe('password meter', () => {
    it('should be hidden when not passed the useMeter prop', () => {
      const component = mount(
        <FormFieldPassword
          id='123'
          helperText='Form helper text'
          labelText='Form label'
          onChange={handleOnChange}
        />,
      );
      const input = component.find(FormInput);
      input.simulate('focus');
      const meter = component.find('meter');
      expect(meter.length).toEqual(0);
    });

    it('should be hidden when the input field is not focused', () => {
      const component = mount(
        <FormFieldPassword
          id='123'
          helperText='Form helper text'
          labelText='Form label'
          onChange={handleOnChange}
        />,
      );
      const meter = component.find('meter');
      expect(meter.length).toEqual(0);
    });

    it('should not be hidden when focusing on the input field', () => {
      const component = mount(
        <FormFieldPassword
          id='123'
          helperText='Form helper text'
          labelText='Form label'
          onChange={handleOnChange}
          meterValue={0}
        />,
      );
      const input = component.find(FormInput);
      input.simulate('focus');
      const meter = component.find('meter');
      expect(meter.length).toEqual(1);
    });
  });

  describe('visibility button', () => {
    it('should change the form input type to "text" on the FormInput component when clicking the button', () => {
      const component = mount(
        <FormFieldPassword
          id='123'
          helperText='Form helper text'
          labelText='Form label'
          onChange={handleOnChange}
        />,
      );
      const button = component.find('[aria-label="Toggle visibility"]');
      button.simulate('click');
      const formInput = component.find(FormInput);
      expect(formInput.props().type).toEqual('text');
    });
    it('should change the form input type to "password" on the FormInput component when clicking the button twice', () => {
      const component = mount(
        <FormFieldPassword
          id='123'
          helperText='Form helper text'
          labelText='Form label'
          onChange={handleOnChange}
        />,
      );
      const button = component.find('[aria-label="Toggle visibility"]');
      button.simulate('click');
      button.simulate('click');
      const formInput = component.find(FormInput);
      expect(formInput.props().type).toEqual('password');
    });
    it('should have the "ds-form-field-password__button--off" class after clicking the button', () => {
      const component = mount(
        <FormFieldPassword
          id='123'
          helperText='Form helper text'
          labelText='Form label'
          onChange={handleOnChange}
        />,
      );
      const button = component.find('button');
      button.simulate('click');
      const clickedButton = component.find('button');
      expect(clickedButton.props().className).toEqual(
        'ds-form-field-password__button ds-form-field-password__button--off',
      );
    });
    it('should have the "ds-form-field-password__button--slim" class if it has a slim prop', () => {
      const component = mount(
        <FormFieldPassword
          id='123'
          slim
          helperText='Form helper text'
          labelText='Form label'
          onChange={handleOnChange}
        />,
      );
      const button = component.find('button');
      button.simulate('click');
      expect(button.props().className).toEqual(
        'ds-form-field-password__button ds-form-field-password__button--slim',
      );
    });
  });
});
