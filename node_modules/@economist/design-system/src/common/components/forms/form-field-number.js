import React, { createRef } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import 'reset-css/reset.css';
import '../color/color';
import '../color/color-hsl';
import '../grid/grid';
import '../typography/typography';
import FormHelperText from './form-helper-text';
import FormLabel from './form-label';
import FormNotice from './form-notice';
import cssLayout from './form-field-layout.css';
import css from './form-field-number.css';
import FormInput from './form-input';

const FormFieldNumber = ({
  adjacent,
  disabled,
  error,
  helperText,
  id,
  labelTag,
  labelText,
  min,
  max,
  name,
  onBlur,
  onChange,
  placeholder,
  slim,
  step,
  value,
}) => {
  const inputRef = createRef();
  const increment = parseInt(step, 10) || 1;
  function incrementValue() {
    const refValue = parseInt(inputRef.current.value, 10) || 0;
    const newValue = refValue + increment;

    if (!max || max >= newValue) {
      inputRef.current.value = newValue;
    }
  }
  function decrementValue() {
    const refValue = parseInt(inputRef.current.value, 10) || 0;
    const newValue = refValue - increment;

    if (!min || min <= newValue) {
      inputRef.current.value = newValue;
    }
  }
  return (
    <div
      className={classnames({
        [`${cssLayout['ds-form-field-layout']} ${
          cssLayout['ds-form-field-layout--adjacent']
        }`]: adjacent,
      })}
    >
      <FormLabel text={labelText} tag={labelTag} htmlFor={id} />
      {helperText && <FormHelperText text={helperText} />}
      <div
        className={classnames(css['ds-form-field-number'], {
          [css['ds-form-field-number--slim']]: slim,
        })}
      >
        <FormInput
          disabled={disabled}
          error={error}
          id={id}
          max={max}
          min={min}
          name={name}
          onBlur={onBlur}
          onChange={onChange}
          placeholder={placeholder}
          ref={inputRef}
          slim={slim}
          step={step}
          type='number'
          value={value}
        />
        <button
          disabled={disabled}
          onClick={incrementValue}
          aria-label='Increase number'
          type='button'
          className={classnames(css['ds-form-field-number__button'])}
        />
        <button
          disabled={disabled}
          onClick={decrementValue}
          aria-label='Decrease number'
          type='button'
          className={classnames(
            css['ds-form-field-number__button'],
            css['ds-form-field-number__button--down'],
          )}
        />
      </div>
      {error && <FormNotice text={error} />}
    </div>
  );
};

FormFieldNumber.defaultProps = {
  adjacent: false,
  disabled: false,
  error: null,
  helperText: null,
  id: '',
  labelTag: null,
  max: null,
  min: null,
  name: '',
  onBlur: null,
  onChange: null,
  placeholder: null,
  slim: null,
  step: null,
  value: '',
};

FormFieldNumber.propTypes = {
  adjacent: PropTypes.bool,
  disabled: PropTypes.bool,
  error: PropTypes.string,
  helperText: PropTypes.string,
  id: PropTypes.string,
  labelTag: PropTypes.string,
  labelText: PropTypes.string.isRequired,
  max: PropTypes.string,
  min: PropTypes.string,
  name: PropTypes.string,
  onBlur: PropTypes.func,
  onChange: PropTypes.func,
  placeholder: PropTypes.string,
  slim: PropTypes.bool,
  step: PropTypes.string,
  value: PropTypes.string,
};

export default FormFieldNumber;
