import React from 'react';
import { shallow } from 'enzyme';
import FormInput from './form-input';

describe('<FormInput />', () => {
  it('should render an input component with default props', () => {
    const component = shallow(
      <FormInput helperText='Form helper text' labelText='Form label' />,
    );
    const input = component.find('input');
    expect(input.props()['aria-label']).toEqual(null);
    expect(input.props().className).toEqual('ds-form-input');
    expect(input.props().disabled).toEqual(false);
    expect(input.props().id).toEqual('');
    expect(input.props().name).toEqual('');
    expect(input.props().onBlur).toEqual(null);
    expect(input.props().onChange).toEqual(null);
    expect(input.props().placeholder).toEqual(null);
    expect(input.props().value).toEqual('');
    expect(input.props().type).toEqual('text');
  });

  it('should pass props to an input component', () => {
    const handleOnBlur = jest.fn();
    const handleOnChange = jest.fn();

    const component = shallow(
      <FormInput
        ariaLabel='Aria label'
        disabled
        id='123'
        name='name'
        labelText='Form label'
        onBlur={handleOnBlur}
        onChange={handleOnChange}
        placeholder='Placeholder text'
        type='email'
        value='Text value'
      />,
    );
    const input = component.find('input');
    expect(input.props()['aria-label']).toEqual('Aria label');
    expect(input.props().disabled).toBeDefined();
    expect(input.props().name).toEqual('name');
    expect(input.props().id).toEqual('123');
    expect(input.props().onBlur).toEqual(handleOnBlur);
    expect(input.props().onChange).toEqual(handleOnChange);
    expect(input.props().placeholder).toEqual('Placeholder text');
    expect(input.props().value).toEqual('Text value');
    expect(input.props().type).toEqual('email');
  });

  it('should have the "ds-form-input--inverse" class if passed inverse prop', () => {
    const component = shallow(
      <FormInput
        inverse
        helperText='Form helper text'
        labelText='Form label'
      />,
    );
    const input = component.find('input');
    expect(input.props().className).toEqual(
      'ds-form-input ds-form-input--inverse',
    );
  });

  it('should have the "ds-number-input" class if it is a number type', () => {
    const component = shallow(
      <FormInput
        type='number'
        helperText='Form helper text'
        labelText='Form label'
      />,
    );
    const input = component.find('input');
    expect(input.props().className).toEqual('ds-form-input ds-number-input');
  });

  it('should have the "ds-date-input" class if it is a date type', () => {
    const component = shallow(
      <FormInput
        type='number'
        helperText='Form helper text'
        labelText='Form label'
      />,
    );
    const input = component.find('input');
    expect(input.props().className).toEqual('ds-form-input ds-number-input');
  });

  it('should have the "ds-form-input--slim" class if it has a slim prop', () => {
    const component = shallow(
      <FormInput slim helperText='Form helper text' labelText='Form label' />,
    );
    const input = component.find('input');
    expect(input.props().className).toEqual(
      'ds-form-input ds-form-input--slim',
    );
  });

  describe('validation', () => {
    it('should render an input with invalid className', () => {
      const component = shallow(
        <FormInput
          id='123'
          error='Inline text notice'
          labelText='Form label'
        />,
      );
      expect(component.find('input').props().className).toEqual(
        'ds-form-input ds-form-input--invalid',
      );
    });
  });

  it('should pass additional props to an input component', () => {
    const component = shallow(<FormInput foo='bar' />);
    expect(component.find('input').props().foo).toEqual('bar');
  });
});
