import React, { useState } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import 'reset-css/reset.css';
import '../color/color';
import '../typography/typography';
import FormPasswordStrengthMeter from './form-password-strength-meter';
import FormHelperText from './form-helper-text';
import FormLabel from './form-label';
import FormInput from './form-input';
import css from './form-field-password.css';

const FormFieldPassword = ({
  disabled,
  error,
  helperText,
  id,
  labelTag,
  labelText,
  maxLength,
  meterLabel,
  meterHigh,
  meterLow,
  meterMax,
  meterOptimum,
  meterValue,
  name,
  onBlur,
  onChange,
  onFocus,
  placeholder,
  slim,
  value,
  ...otherProps
}) => {
  const [visibility, setVisibility] = useState(false);
  const [showMeter, setShowMeter] = useState(false);

  function toggleVisibility() {
    setVisibility(!visibility);
  }

  function handleFocus(e) {
    if (typeof meterValue === 'number') {
      setShowMeter(true);
    }
    if (onFocus) {
      onFocus(e);
    }
  }

  function handleBlur(e) {
    if (!value.length) {
      setShowMeter(false);
    }
    if (onBlur) {
      onBlur(e);
    }
  }

  return (
    <>
      <div className={classnames(css['ds-form-field-password'])}>
        <FormLabel text={labelText} tag={labelTag} htmlFor={id} />
        {helperText && <FormHelperText text={helperText} />}
        <FormInput
          disabled={disabled}
          error={error}
          id={id}
          maxLength={maxLength}
          name={name}
          onBlur={handleBlur}
          onChange={onChange}
          onFocus={handleFocus}
          placeholder={placeholder}
          slim={slim}
          type={visibility ? 'text' : 'password'}
          value={value}
          {...otherProps}
        />
        <button
          disabled={disabled}
          onClick={toggleVisibility}
          aria-label='Toggle visibility'
          type='button'
          className={classnames(css['ds-form-field-password__button'], {
            [css['ds-form-field-password__button--off']]: visibility,
            [css['ds-form-field-password__button--slim']]: slim,
          })}
        />
      </div>
      {showMeter && (
        <FormPasswordStrengthMeter
          label={meterLabel}
          low={meterLow}
          high={meterHigh}
          optimum={meterOptimum}
          max={meterMax}
          value={meterValue}
        />
      )}
    </>
  );
};

FormFieldPassword.defaultProps = {
  disabled: false,
  error: null,
  helperText: null,
  id: null,
  maxLength: null,
  meterHigh: 12,
  meterLabel: 'Strength',
  meterLow: 8,
  meterMax: 13,
  meterOptimum: 13,
  meterValue: null,
  name: null,
  onBlur: null,
  onFocus: null,
  placeholder: null,
  labelTag: null,
  slim: null,
  value: undefined,
};

FormFieldPassword.propTypes = {
  disabled: PropTypes.bool,
  error: PropTypes.string,
  helperText: PropTypes.string,
  id: PropTypes.string,
  labelTag: PropTypes.string,
  labelText: PropTypes.string.isRequired,
  maxLength: PropTypes.number,
  meterHigh: PropTypes.number,
  meterLabel: PropTypes.string,
  meterLow: PropTypes.number,
  meterMax: PropTypes.number,
  meterOptimum: PropTypes.number,
  meterValue: PropTypes.number,
  name: PropTypes.string,
  onBlur: PropTypes.func,
  onChange: PropTypes.func.isRequired,
  onFocus: PropTypes.func,
  placeholder: PropTypes.string,
  slim: PropTypes.bool,
  value: PropTypes.string,
};

export default FormFieldPassword;
