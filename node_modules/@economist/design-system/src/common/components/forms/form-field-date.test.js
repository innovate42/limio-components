import React from 'react';
import { shallow } from 'enzyme';
import FormInput from './form-input';
import FormFieldDate from './form-field-date';

const handleOnChange = jest.fn();

describe('<FormFieldDate />', () => {
  it('should pass default props to the FormInput component', () => {
    const component = shallow(
      <FormFieldDate helperText='Form helper text' labelText='Form label' />,
    );
    const formInput = component.find(FormInput);
    expect(formInput.props().disabled).toEqual(false);
    expect(formInput.props().onBlur).toEqual(null);
    expect(formInput.props().onChange).toEqual(null);
    expect(formInput.props().id).toEqual('');
    expect(formInput.props().name).toEqual('');
    expect(formInput.props().value).toEqual('');
  });

  it('should pass props to a FormInput component', () => {
    const handleOnBlur = jest.fn();

    const component = shallow(
      <FormFieldDate
        disabled
        error='Error message'
        id='123'
        labelText='Form label'
        onBlur={handleOnBlur}
        onChange={handleOnChange}
        max='100'
        min='-100'
        slim
        step='5'
        name='Field name'
        value='Text value'
      />,
    );
    const formInput = component.find(FormInput);
    expect(formInput.props().disabled).toBeDefined();
    expect(formInput.props().error).toEqual('Error message');
    expect(formInput.props().id).toEqual('123');
    expect(formInput.props().onBlur).toEqual(handleOnBlur);
    expect(formInput.props().onChange).toEqual(handleOnChange);
    expect(formInput.props().name).toEqual('Field name');
    expect(formInput.props().value).toEqual('Text value');
    expect(formInput.props().max).toEqual('100');
    expect(formInput.props().min).toEqual('-100');
    expect(formInput.props().slim).toEqual(true);
    expect(formInput.props().step).toEqual('5');
  });

  it('should pass props to the FormLabel component', () => {
    const component = shallow(
      <FormFieldDate id='123' labelTag='FORM TAG' labelText='Form label' />,
    );
    const label = component.find('FormLabel');
    expect(label.props().htmlFor).toEqual('123');
    expect(label.props().text).toEqual('Form label');
    expect(label.props().tag).toEqual('FORM TAG');
  });

  it('should pass helper text prop to the FormHelperText component', () => {
    const component = shallow(
      <FormFieldDate helperText='Form helper text' labelText='Form label' />,
    );
    expect(component.find('FormHelperText').props().text).toEqual(
      'Form helper text',
    );
  });

  describe('validation', () => {
    it('should render an FormInput an error prop', () => {
      const component = shallow(
        <FormFieldDate error='Inline text notice' labelText='Form label' />,
      );
      expect(component.find(FormInput).props().error).toEqual(
        'Inline text notice',
      );
    });

    it('should render a FormNotice component with error text', () => {
      const component = shallow(
        <FormFieldDate error='Inline text notice' labelText='Form label' />,
      );
      const notice = component.find('FormNotice');
      expect(notice.props().text).toEqual('Inline text notice');
    });
  });

  it("should render a container 'ds-form-field-layout ds-form-field-layout--adjacent' className when passed the adjacent prop", () => {
    const component = shallow(
      <FormFieldDate adjacent labelText='Form label' />,
    );
    expect(
      component
        .find('div')
        .first()
        .props().className,
    ).toEqual('ds-form-field-layout ds-form-field-layout--adjacent');
  });
});
