import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import 'reset-css/reset.css';
import '../color/color';
import '../color/color-hsl';
import '../grid/grid';
import '../typography/typography';
import cssLayout from './form-field-layout.css';
import css from './form-input.css';
import FormLabel from './form-label';
import FormHelperText from './form-helper-text';
import FormNotice from './form-notice';

const FormFieldSelect = ({
  adjacent,
  disabled,
  error,
  helperText,
  id,
  labelTag,
  labelText,
  options,
  slim,
  value,
  defaultValue,
  ...otherProps
}) => (
  <div
    className={classnames({
      [`${cssLayout['ds-form-field-layout']} ${
        cssLayout['ds-form-field-layout--adjacent']
      }`]: adjacent,
    })}
  >
    <FormLabel text={labelText} tag={labelTag} htmlFor={id} />
    {helperText && <FormHelperText text={helperText} />}
    <select
      id={id}
      disabled={disabled}
      defaultValue={defaultValue || value}
      className={classnames(
        css['ds-form-input'],
        {
          [css['ds-form-input--invalid']]: error,
          [css['ds-form-input--slim']]: slim,
        },
        css['ds-form-field-select'],
      )}
      {...otherProps}
    >
      {options.map(o => (
        <option key={o.value} aria-selected={value === o.value} value={o.value}>
          {o.label}
        </option>
      ))}
    </select>
    {error && <FormNotice text={error} />}
  </div>
);

FormFieldSelect.defaultProps = {
  adjacent: false,
  disabled: false,
  error: '',
  helperText: null,
  options: [],
  labelTag: null,
  slim: null,
  value: '',
  defaultValue: undefined,
};

FormFieldSelect.propTypes = {
  adjacent: PropTypes.bool,
  disabled: PropTypes.bool,
  error: PropTypes.string,
  helperText: PropTypes.string,
  id: PropTypes.string.isRequired,
  labelTag: PropTypes.string,
  labelText: PropTypes.string.isRequired,
  options: PropTypes.arrayOf(
    PropTypes.shape({ value: PropTypes.string, label: PropTypes.string }),
  ),
  slim: PropTypes.bool,
  value: PropTypes.string,
  defaultValue: PropTypes.string,
};

export default FormFieldSelect;
