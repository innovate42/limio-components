import React from 'react';
import { shallow } from 'enzyme';
import FormFieldSelect from './form-field-select';

const options = [
  { label: 'Option 1', value: '1' },
  { label: 'Option 2', value: '2' },
  { label: 'Option 3', value: '3' },
];

describe('<FormFieldSelect />', () => {
  it('should render a select component with default props', () => {
    const component = shallow(
      <FormFieldSelect
        id='123'
        helperText='Form helper text'
        labelText='Form label'
      />,
    );
    const select = component.find('select');
    expect(select.props().className).toEqual(
      'ds-form-input ds-form-field-select',
    );
    expect(select.props().disabled).toEqual(false);
    expect(select.props().children).toEqual([]);
  });

  it('should pass props to a select component', () => {
    const handleOnBlur = jest.fn();
    const handleOnChange = jest.fn();
    const component = shallow(
      <FormFieldSelect
        disabled
        id='123'
        name='testName'
        labelText='Form label'
        onBlur={handleOnBlur}
        onChange={handleOnChange}
        options={options}
      />,
    );
    const select = component.find('select');
    expect(select.props().name).toEqual('testName');
    expect(select.props().disabled).toEqual(true);
    expect(select.props().id).toEqual('123');
    expect(select.props().onBlur).toEqual(handleOnBlur);
    expect(select.props().onChange).toEqual(handleOnChange);
    expect(select.props().children.length).toEqual(options.length);
  });

  it('should have the correct option selected', () => {
    const component = shallow(
      <FormFieldSelect
        id='123'
        labelText='Form label'
        options={options}
        value='2'
      />,
    );
    const select = component.find('select');
    expect(select.props().children[0].props['aria-selected']).toEqual(false);
    expect(select.props().children[1].props['aria-selected']).toEqual(true);
    expect(select.props().children[2].props['aria-selected']).toEqual(false);
  });

  it('should pass props to the FormLabel component', () => {
    const component = shallow(
      <FormFieldSelect id='123' labelTag='FORM TAG' labelText='Form label' />,
    );
    const label = component.find('FormLabel');
    expect(label.props().htmlFor).toEqual('123');
    expect(label.props().text).toEqual('Form label');
    expect(label.props().tag).toEqual('FORM TAG');
  });

  it('should pass helper text prop to the FormHelperText component', () => {
    const component = shallow(
      <FormFieldSelect
        id='123'
        helperText='Form helper text'
        labelText='Form label'
      />,
    );
    expect(component.find('FormHelperText').props().text).toEqual(
      'Form helper text',
    );
  });

  it('should render a slim className when passed the slim prop', () => {
    const component = shallow(
      <FormFieldSelect id='123' slim labelText='Form label' />,
    );
    expect(component.find('select').props().className).toEqual(
      'ds-form-input ds-form-input--slim ds-form-field-select',
    );
  });

  describe('validation', () => {
    it('should render an select with invalid className', () => {
      const component = shallow(
        <FormFieldSelect
          id='123'
          error='Inline text notice'
          labelText='Form label'
        />,
      );
      expect(component.find('select').props().className).toEqual(
        'ds-form-input ds-form-input--invalid ds-form-field-select',
      );
    });

    it('should render a FormNotice component with error text', () => {
      const component = shallow(
        <FormFieldSelect
          id='123'
          error='Inline text notice'
          labelText='Form label'
        />,
      );
      const notice = component.find('FormNotice');
      expect(notice.props().text).toEqual('Inline text notice');
    });
  });

  it("should render a container 'ds-form-field-layout ds-form-field-layout--adjacent' className when passed the adjacent prop", () => {
    const component = shallow(
      <FormFieldSelect id='123' adjacent labelText='Form label' />,
    );
    expect(
      component
        .find('div')
        .first()
        .props().className,
    ).toEqual('ds-form-field-layout ds-form-field-layout--adjacent');
  });
});
