import React from 'react';
import { shallow } from 'enzyme';
import FormFieldMultipleInputs from './form-field-multiple-inputs';
import FormInput from './form-input';

const fields = {
  1: {
    ariaLabel: 'Label 1',
    disabled: false,
    error: 'Error 1',
    id: '1',
    name: 'Name 1',
    placeholder: 'Placeholder 1',
    type: 'date',
    value: 'Value 1',
  },
  2: {
    ariaLabel: 'Label 2',
    disabled: true,
    error: 'Error 2',
    id: '2',
    name: 'Name 2',
    placeholder: 'Placeholder 2',
    type: 'password',
    value: 'Value 2',
  },
};

const handleOnChange = jest.fn();

describe('<FormFieldMultipleInputs />', () => {
  describe('<FormInput />', () => {
    it('should be rendered for each field', () => {
      const component = shallow(
        <FormFieldMultipleInputs
          fields={fields}
          onChange={handleOnChange}
          helperText='Form helper text'
          labelText='Form label'
        />,
      );
      const formInput = component.find(FormInput);
      expect(formInput.length).toEqual(2);
    });
    it('should receive props for each field', () => {
      const component = shallow(
        <FormFieldMultipleInputs
          fields={fields}
          onChange={handleOnChange}
          helperText='Form helper text'
          labelText='Form label'
        />,
      );
      const firstInput = component.find(FormInput).first();
      expect(firstInput.props().ariaLabel).toEqual('Label 1');
      expect(firstInput.props().disabled).toEqual(false);
      expect(firstInput.props().error).toEqual('Error 1');
      expect(firstInput.props().id).toEqual('1');
      expect(firstInput.props().name).toEqual('Name 1');
      expect(firstInput.props().placeholder).toEqual('Placeholder 1');
      expect(firstInput.props().type).toEqual('date');
      expect(firstInput.props().value).toEqual('Value 1');
      expect(firstInput.props().onChange).toEqual(handleOnChange);

      const secondInput = component.find(FormInput).last();
      expect(secondInput.props().ariaLabel).toEqual('Label 2');
      expect(secondInput.props().disabled).toEqual(true);
      expect(secondInput.props().error).toEqual('Error 2');
      expect(secondInput.props().id).toEqual('2');
      expect(secondInput.props().name).toEqual('Name 2');
      expect(secondInput.props().placeholder).toEqual('Placeholder 2');
      expect(secondInput.props().type).toEqual('password');
      expect(secondInput.props().value).toEqual('Value 2');
      expect(secondInput.props().onChange).toEqual(handleOnChange);
    });

    it('should pass additional props to each component', () => {
      const component = shallow(
        <FormFieldMultipleInputs
          foo='bar'
          fields={fields}
          onChange={handleOnChange}
          helperText='Form helper text'
          labelText='Form label'
        />,
      );
      expect(
        component
          .find(FormInput)
          .first()
          .props().foo,
      ).toEqual('bar');
      expect(
        component
          .find(FormInput)
          .last()
          .props().foo,
      ).toEqual('bar');
    });
  });

  it('should pass helper text to the FormHelperText component', () => {
    const component = shallow(
      <FormFieldMultipleInputs
        onChange={handleOnChange}
        fields={fields}
        helperText='Form helper text'
        labelText='Form label'
      />,
    );
    expect(component.find('FormHelperText').props().text).toEqual(
      'Form helper text',
    );
  });

  it('should pass notice text to the FormNotice component', () => {
    const component = shallow(
      <FormFieldMultipleInputs
        onChange={handleOnChange}
        fields={fields}
        notice='Inline text notice'
        labelText='Form label'
      />,
    );
    const notice = component.find('FormNotice');
    expect(notice.props().text).toEqual('Inline text notice');
  });
});
