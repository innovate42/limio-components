import React, { useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import 'reset-css/reset.css';
import '../grid/grid';
import Button from '../button/button';
import FormInput from './form-input';
import FormLabel from './form-label';
import FormNotice from './form-notice';
import SlimButton from '../slim-button/slim-button';
import cssLayout from './form-field-layout.css';
import css from './form-field-combined-input.css';

const FormFieldCombinedInput = ({
  adjacent,
  buttonLabel,
  buttonType,
  disabled,
  error,
  id,
  icon,
  inverse,
  labelText,
  maxLength,
  name,
  onBlur,
  onButtonClick,
  onChange,
  placeholder,
  slim,
  value,
  focusInput,
  ...otherProps
}) => {
  const inputRef = useRef();

  useEffect(() => {
    if (focusInput) inputRef.current.focus();
  }, [focusInput]);

  return (
    <div
      className={classnames({
        [`${cssLayout['ds-form-field-layout']} ${
          cssLayout['ds-form-field-layout--adjacent']
        }`]: adjacent,
      })}
    >
      <FormLabel inverse={inverse} text={labelText} htmlFor={id} />
      <div className={classnames(css['ds-form-field-combined-input'])}>
        <FormInput
          disabled={disabled}
          error={error}
          id={id}
          inverse={inverse}
          maxLength={maxLength}
          name={name}
          onBlur={onBlur}
          onChange={onChange}
          placeholder={placeholder}
          slim={slim}
          value={value}
          ref={inputRef}
          {...otherProps}
        />
        {slim ? (
          <SlimButton
            disabled={disabled}
            onClick={onButtonClick}
            type={buttonType}
            inverse={inverse}
            secondary={inverse}
            icon={icon}
          >
            {buttonLabel}
          </SlimButton>
        ) : (
          <Button
            disabled={disabled}
            onClick={onButtonClick}
            inverse={inverse}
            secondary={inverse}
            type={buttonType}
            icon={icon}
          >
            {buttonLabel}
          </Button>
        )}
      </div>
      {error && <FormNotice text={error} />}
    </div>
  );
};

FormFieldCombinedInput.defaultProps = {
  adjacent: false,
  buttonType: null,
  disabled: false,
  error: null,
  id: '',
  icon: false,
  inverse: null,
  maxLength: null,
  name: '',
  onBlur: null,
  onButtonClick: null,
  onChange: null,
  onClick: null,
  placeholder: null,
  slim: false,
  value: '',
  focusInput: false,
};

FormFieldCombinedInput.propTypes = {
  adjacent: PropTypes.bool,
  buttonLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.string])
    .isRequired,
  buttonType: PropTypes.oneOf(['button', 'reset', 'submit']),
  disabled: PropTypes.bool,
  error: PropTypes.string,
  icon: PropTypes.bool,
  id: PropTypes.string,
  inverse: PropTypes.bool,
  labelText: PropTypes.string.isRequired,
  maxLength: PropTypes.number,
  name: PropTypes.string,
  onBlur: PropTypes.func,
  onButtonClick: PropTypes.func,
  onChange: PropTypes.func,
  onClick: PropTypes.func,
  placeholder: PropTypes.string,
  slim: PropTypes.bool,
  value: PropTypes.string,
  focusInput: PropTypes.bool,
};

export default FormFieldCombinedInput;
