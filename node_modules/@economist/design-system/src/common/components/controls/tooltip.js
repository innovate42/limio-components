import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import 'reset-css/reset.css';
import '../color/color';
import '../color/color-hsl';
import '../grid/grid';
import '../typography/typography';
import css from './tooltip.css';

const DIRECTIONS = {
  NORTH: 'north',
  SOUTH: 'south',
  EAST: 'east',
  WEST: 'west',
};

const max = 100;

const Tooltip = ({ balloonText, labelText, inverse, direction }) => {
  const randomKey = Math.floor(Math.random() * Math.floor(max));
  return (
    <div className={css['ds-tooltip']}>
      <label
        htmlFor={`tooltipButton_${randomKey}`}
        className={classnames(css['ds-tooltip-label'], {
          [css['ds-tooltip-label--inverse']]: inverse,
          [css['ds-tooltip-label--right']]: direction === DIRECTIONS.EAST,
        })}
      >
        <span>{labelText}</span>
        <button
          className={classnames(css['ds-tooltip-button'], {
            [css['ds-tooltip-button--inverse']]: inverse,
            [css['ds-tooltip-button--left']]: direction === DIRECTIONS.EAST,
          })}
          id={`tooltipButton_${randomKey}`}
          type='button'
        >
          <svg
            xmlns='http://www.w3.org/2000/svg'
            width='20'
            height='20'
            viewBox='-2 -2 24 24'
          >
            <g fillRule='nonzero' fill='none'>
              <path
                d='M10 0C4.48 0 0 4.48 0 10s4.48 10 10 10 10-4.48 10-10S15.52 0 10 0z'
                fill='#333'
                className={classnames(css['path-background'])}
              />
              <path
                fill='#FFF'
                d='M11 15H9V9h2zM11 7H9V5h2z'
                className={classnames(css['path-foreground'])}
              />
            </g>
          </svg>
          <span
            role='tooltip'
            id='tooltip'
            className={classnames(css['ds-tooltip__balloon'], {
              [css[`ds-tooltip__balloon--${direction}`]]: direction,
              [css['ds-tooltip__balloon--inverse']]: inverse,
            })}
          >
            {balloonText}
          </span>
        </button>
      </label>
    </div>
  );
};

Tooltip.defaultProps = {
  balloonText: '',
  direction: DIRECTIONS.NORTH,
  labelText: '',
  inverse: false,
};

Tooltip.propTypes = {
  balloonText: PropTypes.string,
  direction: PropTypes.oneOf([
    DIRECTIONS.NORTH,
    DIRECTIONS.SOUTH,
    DIRECTIONS.EAST,
    DIRECTIONS.WEST,
  ]),
  labelText: PropTypes.string,
  inverse: PropTypes.bool,
};

export default Tooltip;
