import React from 'react';
import { shallow } from 'enzyme';
import ControlClose from './control-close';

describe('<ControlClose />', () => {
  it('should render the correct default props', () => {
    const component = shallow(<ControlClose>Close</ControlClose>);
    expect(component.find('button').props().type).toEqual('button');
    expect(component.props().className).toEqual('ds-control-close');
    expect(component.props().disabled).toEqual(false);
    expect(component.props()['aria-label']).toEqual('Close');
  });

  it('should render a disabled attribute if its passed', () => {
    const component = shallow(<ControlClose disabled>Close</ControlClose>);
    expect(component.find('button').props().disabled).toEqual(true);
  });

  it('should render the ariaLabel attribute if its passed', () => {
    const component = shallow(
      <ControlClose ariaLabel='test label'>Close</ControlClose>,
    );
    expect(component.find('button').props()['aria-label']).toEqual(
      'test label',
    );
  });

  it('should render inverse classname if inverse prop is passed', () => {
    const component = shallow(<ControlClose inverse>Close</ControlClose>);
    expect(component.find('button').props().className).toEqual(
      'ds-control-close ds-control-close--inverse',
    );
  });

  it('should render fullScreen classname if fullScreen prop is passed', () => {
    const component = shallow(<ControlClose fullScreen>Close</ControlClose>);
    expect(component.find('button').props().className).toEqual(
      'ds-control-close ds-control-close--full-screen',
    );
  });

  it('should render fullScreen inverse classname if inverse and fullScreen props are passed', () => {
    const component = shallow(
      <ControlClose fullScreen inverse>
        Close
      </ControlClose>,
    );
    expect(component.find('button').props().className).toEqual(
      'ds-control-close ds-control-close--full-screen ds-control-close--inverse',
    );
  });

  it('should pass the handleClick prop to the close button`s onClick event handler', () => {
    const handleClick = jest.fn();
    const component = shallow(
      <ControlClose handleClick={handleClick}>Close</ControlClose>,
    );
    component.find('button').simulate('click');
    expect(handleClick).toHaveBeenCalled();
  });
});
