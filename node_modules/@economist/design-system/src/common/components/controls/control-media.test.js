import React from 'react';
import { shallow } from 'enzyme';
import ControlMedia from './control-media';

describe('<ControlMedia />', () => {
  it('should render the correct default props', () => {
    const component = shallow(<ControlMedia />);
    expect(component.find('button').props().type).toEqual('button');
    expect(component.props().className).toEqual('ds-control-media');
    expect(component.props().disabled).toEqual(false);
    expect(component.props()['aria-label']).toEqual('play');
    expect(component.find('#iconPlay').length).toEqual(1);
    expect(
      component
        .find('#iconPlay')
        .find('polygon')
        .props().className,
    ).toEqual('path-background');
  });

  it('should render a disabled attribute and classname if its passed', () => {
    const component = shallow(<ControlMedia disabled />);
    expect(component.find('button').props().disabled).toEqual(true);
    expect(
      component
        .find('#iconPlay')
        .find('polygon')
        .props().className,
    ).toEqual('path-background path-background--disabled');
  });

  it('should render the ariaLabel attribute if its passed', () => {
    const component = shallow(<ControlMedia ariaLabel='test label' />);
    expect(component.find('button').props()['aria-label']).toEqual(
      'test label',
    );
  });

  it('should render the controlType as ariaLabel attribute if no ariaLabel is passed', () => {
    const component = shallow(<ControlMedia controlType='stop' />);
    expect(component.find('button').props()['aria-label']).toEqual('stop');
  });

  it('should render inverse classname if inverse prop is true', () => {
    const component = shallow(<ControlMedia inverse />);
    expect(component.find('button').props().className).toEqual(
      'ds-control-media ds-control-media--inverse',
    );
    expect(
      component
        .find('#iconPlay')
        .find('polygon')
        .props().className,
    ).toEqual('path-background path-background--inverse');
  });

  it('should render the stop icon if controlType is stop', () => {
    const component = shallow(<ControlMedia controlType='stop' />);
    expect(component.find('#iconStop').length).toEqual(1);
  });

  it('should render the pause icon if controlType is pause', () => {
    const component = shallow(<ControlMedia controlType='pause' />);
    expect(component.find('#iconPause').length).toEqual(1);
  });

  it('should pass the click handler prop to the component', () => {
    const handleClick = jest.fn();
    const component = shallow(
      <ControlMedia handleClick={handleClick} controlType='pause' />,
    );
    expect(component.props().onClick).toEqual(handleClick);
  });
});
