import React from 'react';
import { shallow } from 'enzyme';
import BannerAlert from './banner-alert';
import CallToActionWithArrow from '../call-to-action-with-arrow/call-to-action-with-arrow';

describe('<BannerAlert />', () => {
  const text = 'Banner alert text';
  const description = 'Banner alert description';
  it('should render the correct default className', () => {
    const component = shallow(<BannerAlert />);
    expect(
      component
        .find('div')
        .first()
        .props().className,
    ).toEqual('ds-banner-alert');
  });

  it('should render the text it is passed', () => {
    const component = shallow(
      <BannerAlert description={description} text={text} />,
    );
    expect(component.find('.ds-banner-alert__text').text()).toEqual(
      `${text} ${description}`,
    );
  });

  it('should render the success classname if passed success as a prop', () => {
    const component = shallow(
      <BannerAlert description={description} text={text} variant='success' />,
    );
    expect(
      component
        .find('div')
        .first()
        .props().className,
    ).toEqual('ds-banner-alert ds-banner-alert--success');
  });

  it('should render the error classname if passed success as a prop', () => {
    const component = shallow(
      <BannerAlert description={description} text={text} variant='error' />,
    );
    expect(
      component
        .find('div')
        .first()
        .props().className,
    ).toEqual('ds-banner-alert ds-banner-alert--error');
  });

  it('should render the warning classname if passed warning as a prop', () => {
    const component = shallow(
      <BannerAlert description={description} text={text} variant='warning' />,
    );
    expect(
      component
        .find('div')
        .first()
        .props().className,
    ).toEqual('ds-banner-alert ds-banner-alert--warning');
  });

  it('should not render the banner alert if passed isClosed', () => {
    const component = shallow(
      <BannerAlert
        isClosed
        description={description}
        text={text}
        variant='warning'
      />,
    );
    expect(component.find('div').length).toEqual(0);
  });

  it('should pass the handleClose prop to the banner alert button`s onClick event handler', () => {
    const handleClose = jest.fn();
    const component = shallow(
      <BannerAlert
        handleClose={handleClose}
        description={description}
        text={text}
        variant='warning'
      />,
    );
    component.find('ControlClose').simulate('click');
    expect(handleClose).toHaveBeenCalled();
  });

  it('should not render close button if passed closable as false', () => {
    const component = shallow(
      <BannerAlert
        description={description}
        text={text}
        variant='warning'
        closable={false}
      />,
    );
    expect(component.find('ControlClose').length).toEqual(0);
  });

  it('should render square button cta', () => {
    const component = shallow(
      <BannerAlert
        button={
          <a href='/some/link' className='ds-button'>
            buttonText
          </a>
        }
        description={description}
        text={text}
        variant='error'
      />,
    );
    expect(component.find('.ds-banner-alert-button').length).toEqual(1);
    expect(component.find('.ds-button').length).toEqual(1);
  });

  it('should render rounded button cta', () => {
    const component = shallow(
      <BannerAlert
        button={<CallToActionWithArrow href='/some/link' text='buttonText' />}
        description={description}
        text={text}
        variant='error'
      />,
    );
    expect(component.find('.ds-banner-alert-button').length).toEqual(1);
    expect(component.find('CallToActionWithArrow').length).toEqual(1);
  });
});
