import React from 'react';
import { shallow } from 'enzyme';
import Button from './button';

describe('<Button />', () => {
  it('should render the correct default props', () => {
    const component = shallow(<Button>Button</Button>);
    expect(component.find('button').props().type).toEqual('button');
    expect(component.props().className).toEqual('ds-button');
    expect(component.props().disabled).toEqual(false);
  });

  it('should render the text', () => {
    const component = shallow(<Button>Button</Button>);
    expect(component.find('button').text()).toEqual('Button');
  });

  it('should render a disabled attribute if its passed', () => {
    const component = shallow(<Button disabled>Button</Button>);
    expect(component.find('button').props().disabled).toEqual(true);
  });

  it('should render inverse classname if inverse prop is passed', () => {
    const component = shallow(<Button inverse>Button</Button>);
    expect(component.find('button').props().className).toEqual(
      'ds-button ds-button--inverse',
    );
  });

  it('should render secondary classname if secondary prop is passed', () => {
    const component = shallow(<Button secondary>Button</Button>);
    expect(component.find('button').props().className).toEqual(
      'ds-button ds-button--secondary',
    );
  });

  it('should render secondary inverse classname if inverse and secondary props are passed', () => {
    const component = shallow(
      <Button secondary inverse>
        Button
      </Button>,
    );
    expect(component.find('button').props().className).toEqual(
      'ds-button ds-button--secondary ds-button--inverse',
    );
  });

  it('should render icon classname if icon prop is passed', () => {
    const component = shallow(<Button icon>Button</Button>);
    expect(component.find('button').props().className).toEqual(
      'ds-button ds-button--icon',
    );
  });

  it('should render submit type if submit is passed as a type props', () => {
    const component = shallow(<Button type='submit'>Button</Button>);
    expect(component.find('button').props().type).toEqual('submit');
  });

  it('should render reset type if reset is passed as a type props', () => {
    const component = shallow(<Button type='reset'>Button</Button>);
    expect(component.find('button').props().type).toEqual('reset');
  });
});
