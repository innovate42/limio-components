/* eslint-disable no-magic-numbers, require-await */
import React from 'react';
import ReactDOM from 'react-dom';
import { act } from 'react-dom/test-utils';
import Notification from './notification';

describe('<Notification />', () => {
  let container;

  beforeEach(() => {
    act(() => {
      container = document.createElement('div');
      document.body.appendChild(container);
      jest.useFakeTimers();
    });
  });

  afterEach(() => {
    act(() => {
      document.body.removeChild(container);
      container = null;
      jest.runAllTimers();
    });
  });

  const text = 'Temporary notification text.';
  const count = 1;

  it('should render the correct default className', () => {
    act(() => {
      ReactDOM.render(
        <Notification notificationId={count} time={400} text={text} />,
        container,
      );
    });
    expect(container.querySelector('div').className).toEqual('ds-notification');
  });

  it('should render the text it is passed', () => {
    act(() => {
      ReactDOM.render(
        <Notification notificationId={count} time={400} text={text} />,
        container,
      );
    });
    expect(container.querySelector('span').textContent).toEqual(text);
  });

  it('should render the success classname if passed success as a prop', () => {
    act(() => {
      ReactDOM.render(
        <Notification
          notificationId={count}
          time={400}
          text={text}
          variant='success'
        />,
        container,
      );
    });
    expect(container.querySelector('div').className).toEqual(
      'ds-notification ds-notification--success',
    );
  });

  it('should render the error classname if passed error as a prop', () => {
    act(() => {
      ReactDOM.render(
        <Notification
          notificationId={count}
          time={400}
          text={text}
          variant='error'
        />,
        container,
      );
    });
    expect(container.querySelector('div').className).toEqual(
      'ds-notification ds-notification--error',
    );
  });

  it('should render the warning classname if passed warning as a prop', () => {
    act(() => {
      ReactDOM.render(
        <Notification
          notificationId={count}
          time={400}
          text={text}
          variant='warning'
        />,
        container,
      );
    });
    expect(container.querySelector('div').className).toEqual(
      'ds-notification ds-notification--warning',
    );
  });

  it('should render the notification with the active classname after 400 ms', async () => {
    await act(async () => {
      ReactDOM.render(
        <Notification notificationId={count} time={3000} text={text} />,
        container,
      );
    });
    act(() => {
      jest.advanceTimersByTime(400);
    });
    expect(container.querySelector('div').className).toEqual(
      'ds-notification ds-notification--active',
    );
  });

  it('should render the notification without the active classname 400 ms before the notification is timed out', async () => {
    await act(async () => {
      ReactDOM.render(
        <Notification notificationId={count} time={3000} text={text} />,
        container,
      );
    });
    act(() => {
      jest.advanceTimersByTime(2600);
    });
    expect(container.querySelector('div').className).toEqual('ds-notification');
  });

  it('should render the notification for the correct amount of time', async () => {
    await act(async () => {
      ReactDOM.render(
        <Notification
          notificationId={count}
          time={3000}
          text={text}
          variant='warning'
        />,
        container,
      );
    });
    act(() => {
      jest.advanceTimersByTime(2999);
    });
    expect(container.querySelector('span').textContent).toEqual(text);
  });

  it('should not render the notification after time has expired', async () => {
    await act(async () => {
      ReactDOM.render(
        <Notification
          notificationId={count}
          time={3000}
          text={text}
          variant='warning'
        />,
        container,
      );
    });
    act(() => {
      jest.advanceTimersByTime(3001);
    });
    expect(container.querySelector('div')).toEqual(null);
  });
});
