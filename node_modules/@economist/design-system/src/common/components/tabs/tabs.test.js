import React from 'react';
import { mount } from 'enzyme';
import Tab from './tab';
import Tabs from './tabs';

describe('<Tabs />', () => {
  it('should render the correct default props', () => {
    const component = mount(
      <Tabs>
        <Tab id='1' title='Tab item 1' />
        <Tab id='2' title='Tab item 2' />
      </Tabs>,
    );
    expect(
      component
        .find('TabItem')
        .first()
        .props().adjacent,
    ).toEqual(false);
    expect(
      component
        .find('TabItem')
        .first()
        .props().minor,
    ).toEqual(false);
  });

  it('should render a TabItem for each Tab passed in children', () => {
    const component = mount(
      <Tabs>
        <Tab id='1' title='Tab item 1' />
        <Tab id='2' title='Tab item 2' />
        <Tab id='3' title='Tab item 3' />
      </Tabs>,
    );
    expect(component.find('TabItem').length).toEqual(3);
  });

  it('should pass the child Tab`s props to the appropriate TabItem', () => {
    const component = mount(
      <Tabs>
        <Tab id='1' title='Tab item 1' />
        <Tab id='2' title='Tab item 2' />
      </Tabs>,
    );

    expect(
      component
        .find('TabItem')
        .first()
        .props().id,
    ).toEqual('1');
    expect(
      component
        .find('TabItem')
        .first()
        .props().title,
    ).toEqual('Tab item 1');
    expect(
      component
        .find('TabItem')
        .last()
        .props().id,
    ).toEqual('2');
    expect(
      component
        .find('TabItem')
        .last()
        .props().title,
    ).toEqual('Tab item 2');
  });

  it('should pass the adjacent prop to the TabItem', () => {
    const component = mount(
      <Tabs adjacent>
        <Tab id='1' title='Tab item 1' />
        <Tab id='2' title='Tab item 2' />
      </Tabs>,
    );
    expect(
      component
        .find('TabItem')
        .first()
        .props().adjacent,
    ).toEqual(true);
    expect(
      component
        .find('TabItem')
        .last()
        .props().adjacent,
    ).toEqual(true);
  });

  it('should pass the minor prop to the TabItem', () => {
    const component = mount(
      <Tabs minor>
        <Tab id='1' title='Tab item 1' />
        <Tab id='2' title='Tab item 2' />
      </Tabs>,
    );
    expect(
      component
        .find('TabItem')
        .first()
        .props().minor,
    ).toEqual(true);
    expect(
      component
        .find('TabItem')
        .last()
        .props().minor,
    ).toEqual(true);
  });

  it('should select the tab which has the `defaultSelected` prop', () => {
    const component = mount(
      <Tabs>
        <Tab id='tab1' title='Tab item 1' />
        <Tab id='tab2' title='Tab item 2' defaultSelected />
      </Tabs>,
    );
    expect(component.find('TabItem#tab2').props().selected).toBe(true);
    expect(component.find('a#tab2').props()['aria-selected']).toBe(true);
    expect(component.find('TabPanel').props().labelledby).toEqual('tab2');
    expect(
      component.find('section[role="tabpanel"]').props()['aria-labelledby'],
    ).toEqual('tab2');
  });

  it('should select the first tab if no tabs have a `defaultSelected` prop', () => {
    const component = mount(
      <Tabs>
        <Tab id='tab1' title='Tab item 1' />
        <Tab id='tab2' title='Tab item 2' />
        <Tab id='tab3' title='Tab item 3' />
      </Tabs>,
    );
    expect(component.find('TabItem#tab1').props().selected).toBe(true);
    expect(component.find('a#tab1').props()['aria-selected']).toBe(true);
    expect(component.find('TabPanel').props().labelledby).toEqual('tab1');
    expect(
      component.find('section[role="tabpanel"]').props()['aria-labelledby'],
    ).toEqual('tab1');
  });
});
