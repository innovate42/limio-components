import React from 'react';
import { mount } from 'enzyme';
import PropTypes from 'prop-types';
import Tab from './tab';
import { TabsContext } from './tabs-context';
import TabPanel from './tab-panel';

const selectTab = jest.fn();
const addTab = jest.fn();

const TestComponent = ({ id, title, children }) => (
  <TabsContext.Provider
    value={{
      state: {
        tabs: [],
        activeTabId: '123',
      },
      addTab,
      selectTab,
    }}
  >
    <Tab title={title} id={id}>
      {children}
    </Tab>
  </TabsContext.Provider>
);

TestComponent.defaultProps = {
  children: null,
};

TestComponent.propTypes = {
  children: PropTypes.oneOfType([
    PropTypes.object,
    PropTypes.array,
    PropTypes.string,
  ]),
  id: PropTypes.string.isRequired,
  title: PropTypes.string.isRequired,
};

describe('<Tab />', () => {
  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should render a TabPanel if the tab is selected', () => {
    const element = mount(
      <TestComponent id='123' title='Tab 1'>
        test
      </TestComponent>,
    );
    expect(element.find(TabPanel).text()).toEqual('test');
  });

  it('should not render a TabPanel if the tab is not selected', () => {
    const element = mount(
      <TestComponent id='124' title='Tab 1'>
        test
      </TestComponent>,
    );
    expect(element.find(TabPanel).exists()).toBeFalsy();
  });

  it('should call addTab on the tabContext with the tab id and title', () => {
    mount(
      <TestComponent id='123' title='Tab 1'>
        test
      </TestComponent>,
    );
    expect(addTab).toHaveBeenCalledWith({ id: '123', title: 'Tab 1' });
  });
});
