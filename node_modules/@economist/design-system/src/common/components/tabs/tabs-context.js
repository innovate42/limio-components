import React, { useReducer, createContext } from 'react';
import PropTypes from 'prop-types';

export const TabsContext = createContext({});

export const actionTypes = {
  ADD_TAB: 'ADD_TAB',
  SELECT_TAB: 'SELECT_TAB',
};

export const TabConsumer = TabsContext.Consumer;

const reducer = (state, action) => {
  switch (action.type) {
    case actionTypes.ADD_TAB: {
      const { id } = action.payload;
      const tabExists = state.tabs.some(tab => tab.id === id);
      const newState = { ...state };

      if (!tabExists) {
        newState.tabs.push({
          ...action.payload,
        });
      }
      return newState;
    }

    case actionTypes.SELECT_TAB: {
      const activeTabId = action.payload;
      return {
        ...state,
        activeTabId,
      };
    }

    default: {
      return state;
    }
  }
};

export const TabProvider = ({ children }) => {
  const initialState = {
    tabs: [],
    activeTabId: undefined,
  };

  const [state, dispatch] = useReducer(reducer, initialState);
  const { activeTabId, tabs } = state;

  function addTab({ id, title }) {
    dispatch({
      type: actionTypes.ADD_TAB,
      payload: {
        id,
        title,
      },
    });
  }

  function selectTab(id) {
    dispatch({
      type: actionTypes.SELECT_TAB,
      payload: id,
    });
  }

  // Select the first tab if no active tab is found.
  if (tabs.length && !activeTabId) {
    selectTab(tabs[0].id);
  }

  return (
    <TabsContext.Provider
      value={{
        state,
        addTab,
        selectTab,
      }}
    >
      {children}
    </TabsContext.Provider>
  );
};

TabProvider.defaultProps = {
  children: null,
};

TabProvider.propTypes = {
  children: PropTypes.node,
};
