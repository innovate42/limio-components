import React from 'react';
import { mount, shallow } from 'enzyme';
import Share from './share';
import generateShareLink from './generate-share-link';
import generateShareIcon from './generate-share-icon';
import shareWindowOpen from './share-window-open';

const PLATFORMS = ['Facebook', 'Twitter', 'LinkedIn', 'WhatsApp'];
const URL = 'http://www.example.com';

const props = {
  text: 'example link text',
  longtext: 'example link longtext',
};

jest.mock('./generate-share-icon', () => ({
  __esModule: true,
  default: jest.fn(() => 'test'),
}));

jest.mock('./generate-share-link', () => ({
  __esModule: true,
  default: jest.fn(() => 'share link'),
}));

jest.mock('./share-window-open', () => ({
  __esModule: true,
  default: jest.fn(() => ''),
}));

describe('<Share />', () => {
  afterEach(() => {
    jest.clearAllMocks();
  });
  it('should render a share item for each platform passed', () => {
    const component = shallow(<Share url={URL} platforms={PLATFORMS} />);
    expect(component.find('li').length).toEqual(PLATFORMS.length);
  });

  it('should call generateShareIcon for each platform passed', () => {
    shallow(<Share url={URL} platforms={PLATFORMS} />);
    expect(generateShareIcon()).toEqual('test');
  });

  it('should pass the icon returned by generateShareIcon to the ShareLink', () => {
    const component = shallow(<Share url={URL} platforms={PLATFORMS} />);
    expect(
      component
        .find('ShareLink')
        .first()
        .props().icon,
    ).toEqual(<test />);
  });

  it('should call generateShareLink with correct params when ShareLink is clicked', () => {
    const component = mount(
      <Share url={URL} {...props} platforms={PLATFORMS} />,
    );
    component
      .find('ShareLink')
      .first()
      .simulate('click');
    expect(generateShareLink).toHaveBeenCalledWith({
      longtext: 'example link longtext',
      platform: 'Facebook',
      text: 'example link text',
      url: 'http://www.example.com',
    });
  });

  it('should call shareWindowOpen with the correct params when ShareLink is clicked', () => {
    const component = mount(
      <Share url={URL} {...props} platforms={PLATFORMS} />,
    );
    component
      .find('ShareLink')
      .first()
      .simulate('click');
    expect(shareWindowOpen).toHaveBeenCalledWith('share link');
  });

  it('should call onShare if provided when ShareLink is clicked', () => {
    const shareCallback = jest.fn();
    const component = mount(
      <Share
        url={URL}
        {...props}
        platforms={PLATFORMS}
        onShare={shareCallback}
      />,
    );
    component
      .find('ShareLink')
      .first()
      .simulate('click');
    expect(shareCallback).toHaveBeenCalledWith({
      longtext: 'example link longtext',
      platform: 'Facebook',
      text: 'example link text',
      url: 'http://www.example.com',
    });
  });
});
