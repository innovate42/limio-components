(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{"./src/common/components/forms/form-field-combined-input.docz.mdx":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return s}));var a=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/extends.js"),i=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),o=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/esm.js")),l=n("./node_modules/docz/dist/index.esm.js"),d=n("./node_modules/react-powerplug/dist/react-powerplug.esm.js"),r=n("./src/common/components/forms/form-field-combined-input.js"),b={};function s(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"formfieldcombinedinput"},"FormFieldCombinedInput"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"SUBCATEGORY:")," Forms"),Object(o.b)("hr",null),Object(o.b)("h2",{id:"combined-input-field"},"Combined input field"),Object(o.b)("h3",{id:"description"},"Description"),Object(o.b)("p",null,"For single input forms, such as search."),Object(o.b)(l.c,{__position:1,__code:'<State initial={{ value: \'\' }}>\n  {({ state, setState }) => (\n    <FormFieldCombinedInput\n      {...state}\n      buttonLabel="Button"\n      id="combined"\n      labelText="Label"\n      maxLength={30}\n      onChange={e => setState({ value: e.target.value })}\n      placeholder="Text placeholder"\n    />\n  )}\n</State>',__scope:{props:this?this.props:n,Playground:l.c,Props:l.d,State:d.b,FormFieldCombinedInput:r.a},mdxType:"Playground"},Object(o.b)(d.b,{initial:{value:""},mdxType:"State"},(function(e){var t=e.state,n=e.setState;return Object(o.b)(r.a,Object(a.a)({},t,{buttonLabel:"Button",id:"combined",labelText:"Label",maxLength:30,onChange:function(e){return n({value:e.target.value})},placeholder:"Text placeholder",mdxType:"FormFieldCombinedInput"}))}))),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Validation")),Object(o.b)(l.c,{__position:2,__code:'<State initial={{ value: \'\' }}>\n  {({ state, setState }) => (\n    <FormFieldCombinedInput\n      {...state}\n      buttonLabel="Button"\n      id="validation"\n      error="Notice"\n      labelText="Label"\n      maxLength={30}\n      onChange={e => setState({ value: e.target.value })}\n      placeholder="Text placeholder"\n    />\n  )}\n</State>',__scope:{props:this?this.props:n,Playground:l.c,Props:l.d,State:d.b,FormFieldCombinedInput:r.a},mdxType:"Playground"},Object(o.b)(d.b,{initial:{value:""},mdxType:"State"},(function(e){var t=e.state,n=e.setState;return Object(o.b)(r.a,Object(a.a)({},t,{buttonLabel:"Button",id:"validation",error:"Notice",labelText:"Label",maxLength:30,onChange:function(e){return n({value:e.target.value})},placeholder:"Text placeholder",mdxType:"FormFieldCombinedInput"}))}))),Object(o.b)("hr",null),Object(o.b)("h2",{id:"combined-input-field-adjacent"},"Combined input field (adjacent)"),Object(o.b)("h3",{id:"description-1"},"Description"),Object(o.b)("p",null,"For single input forms, such as search."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Avoid including ",Object(o.b)("inlineCode",{parentName:"strong"},"error"),", ",Object(o.b)("inlineCode",{parentName:"strong"},"labelTag")," and ",Object(o.b)("inlineCode",{parentName:"strong"},"helperText")," props when using adjacent layout. Instead, use the standard layout.")),Object(o.b)(l.c,{__position:4,__code:'<State initial={{ value: \'\' }}>\n  {({ state, setState }) => (\n    <FormFieldCombinedInput\n      {...state}\n      adjacent\n      buttonLabel="Button"\n      id="combined-adjacent"\n      labelText="Label"\n      maxLength={30}\n      onChange={e => setState({ value: e.target.value })}\n      placeholder="Text placeholder"\n    />\n  )}\n</State>',__scope:{props:this?this.props:n,Playground:l.c,Props:l.d,State:d.b,FormFieldCombinedInput:r.a},mdxType:"Playground"},Object(o.b)(d.b,{initial:{value:""},mdxType:"State"},(function(e){var t=e.state,n=e.setState;return Object(o.b)(r.a,Object(a.a)({},t,{adjacent:!0,buttonLabel:"Button",id:"combined-adjacent",labelText:"Label",maxLength:30,onChange:function(e){return n({value:e.target.value})},placeholder:"Text placeholder",mdxType:"FormFieldCombinedInput"}))}))),Object(o.b)("hr",null),Object(o.b)("h2",{id:"combined-input-field-inverse"},"Combined input field (inverse)"),Object(o.b)("h3",{id:"description-2"},"Description"),Object(o.b)("p",null,"For single input forms, such as search."),Object(o.b)(l.c,{__position:6,__code:'<State initial={{ value: \'\' }}>\n  {({ state, setState }) => (\n    <FormFieldCombinedInput\n      {...state}\n      id="combined-inverse"\n      buttonLabel="Button"\n      inverse\n      labelText="Label"\n      maxLength={30}\n      onChange={e => setState({ value: e.target.value })}\n      placeholder="Text placeholder"\n    />\n  )}\n</State>',__scope:{props:this?this.props:n,Playground:l.c,Props:l.d,State:d.b,FormFieldCombinedInput:r.a},style:{backgroundColor:"#333",margin:"-2em",padding:"2em"},mdxType:"Playground"},Object(o.b)(d.b,{initial:{value:""},mdxType:"State"},(function(e){var t=e.state,n=e.setState;return Object(o.b)(r.a,Object(a.a)({},t,{id:"combined-inverse",buttonLabel:"Button",inverse:!0,labelText:"Label",maxLength:30,onChange:function(e){return n({value:e.target.value})},placeholder:"Text placeholder",mdxType:"FormFieldCombinedInput"}))}))),Object(o.b)("hr",null),Object(o.b)("h2",{id:"combined-input-field-inverse-adjacent"},"Combined input field (inverse, adjacent)"),Object(o.b)("h3",{id:"description-3"},"Description"),Object(o.b)("p",null,"For single input forms, such as search."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Avoid including ",Object(o.b)("inlineCode",{parentName:"strong"},"error"),", ",Object(o.b)("inlineCode",{parentName:"strong"},"labelTag")," and ",Object(o.b)("inlineCode",{parentName:"strong"},"helperText")," props when using adjacent layout. Instead, use the standard layout.")),Object(o.b)(l.c,{__position:8,__code:'<State initial={{ value: \'\' }}>\n  {({ state, setState }) => (\n    <FormFieldCombinedInput\n      adjacent\n      {...state}\n      id="combined-inverse"\n      buttonLabel="Button"\n      inverse\n      labelText="Label"\n      maxLength={30}\n      onChange={e => setState({ value: e.target.value })}\n      placeholder="Text placeholder"\n    />\n  )}\n</State>',__scope:{props:this?this.props:n,Playground:l.c,Props:l.d,State:d.b,FormFieldCombinedInput:r.a},style:{backgroundColor:"#333",margin:"-2em",padding:"2em"},mdxType:"Playground"},Object(o.b)(d.b,{initial:{value:""},mdxType:"State"},(function(e){var t=e.state,n=e.setState;return Object(o.b)(r.a,Object(a.a)({adjacent:!0},t,{id:"combined-inverse",buttonLabel:"Button",inverse:!0,labelText:"Label",maxLength:30,onChange:function(e){return n({value:e.target.value})},placeholder:"Text placeholder",mdxType:"FormFieldCombinedInput"}))}))),Object(o.b)("hr",null),Object(o.b)("h2",{id:"combined-input-field-slim"},"Combined input field (slim)"),Object(o.b)("h3",{id:"description-4"},"Description"),Object(o.b)("p",null,"For single input forms. Use where inputs are nested or constrained by layout."),Object(o.b)(l.c,{__position:10,__code:'<State initial={{ value: \'Text value\' }}>\n  {({ state, setState }) => (\n    <FormFieldCombinedInput\n      {...state}\n      id="combined-slim"\n      buttonLabel="Button"\n      labelText="Label"\n      maxLength={30}\n      onChange={e => setState({ value: e.target.value })}\n      slim\n      placeholder="Text placeholder"\n    />\n  )}\n</State>',__scope:{props:this?this.props:n,Playground:l.c,Props:l.d,State:d.b,FormFieldCombinedInput:r.a},mdxType:"Playground"},Object(o.b)(d.b,{initial:{value:"Text value"},mdxType:"State"},(function(e){var t=e.state,n=e.setState;return Object(o.b)(r.a,Object(a.a)({},t,{id:"combined-slim",buttonLabel:"Button",labelText:"Label",maxLength:30,onChange:function(e){return n({value:e.target.value})},slim:!0,placeholder:"Text placeholder",mdxType:"FormFieldCombinedInput"}))}))),Object(o.b)("hr",null),Object(o.b)("h2",{id:"combined-input-field-slim-adjacent"},"Combined input field (slim, adjacent)"),Object(o.b)("h3",{id:"description-5"},"Description"),Object(o.b)("p",null,"For single input forms. Use where inputs are nested or constrained by layout."),Object(o.b)(l.c,{__position:12,__code:'<State initial={{ value: \'Text value\' }}>\n  {({ state, setState }) => (\n    <FormFieldCombinedInput\n      adjacent\n      {...state}\n      id="combined-slim"\n      buttonLabel="Button"\n      labelText="Label"\n      maxLength={30}\n      onChange={e => setState({ value: e.target.value })}\n      slim\n      placeholder="Text placeholder"\n    />\n  )}\n</State>',__scope:{props:this?this.props:n,Playground:l.c,Props:l.d,State:d.b,FormFieldCombinedInput:r.a},mdxType:"Playground"},Object(o.b)(d.b,{initial:{value:"Text value"},mdxType:"State"},(function(e){var t=e.state,n=e.setState;return Object(o.b)(r.a,Object(a.a)({adjacent:!0},t,{id:"combined-slim",buttonLabel:"Button",labelText:"Label",maxLength:30,onChange:function(e){return n({value:e.target.value})},slim:!0,placeholder:"Text placeholder",mdxType:"FormFieldCombinedInput"}))}))),Object(o.b)("hr",null),Object(o.b)("h2",{id:"combined-input-field-slim-inverse"},"Combined input field (slim, inverse)"),Object(o.b)("h3",{id:"description-6"},"Description"),Object(o.b)("p",null,"For single input forms. Use where inputs are nested or constrained by layout."),Object(o.b)(l.c,{__position:14,__code:'<State initial={{ value: \'Text value\' }}>\n  {({ state, setState }) => (\n    <FormFieldCombinedInput\n      {...state}\n      buttonLabel="Button"\n      labelText="Label"\n      id="combined-slim-inverse"\n      inverse\n      maxLength={30}\n      onChange={e => setState({ value: e.target.value })}\n      slim\n      placeholder="Text placeholder"\n    />\n  )}\n</State>',__scope:{props:this?this.props:n,Playground:l.c,Props:l.d,State:d.b,FormFieldCombinedInput:r.a},style:{backgroundColor:"#333",margin:"-2em",padding:"2em"},mdxType:"Playground"},Object(o.b)(d.b,{initial:{value:"Text value"},mdxType:"State"},(function(e){var t=e.state,n=e.setState;return Object(o.b)(r.a,Object(a.a)({},t,{buttonLabel:"Button",labelText:"Label",id:"combined-slim-inverse",inverse:!0,maxLength:30,onChange:function(e){return n({value:e.target.value})},slim:!0,placeholder:"Text placeholder",mdxType:"FormFieldCombinedInput"}))}))),Object(o.b)("hr",null),Object(o.b)("h2",{id:"combined-input-field-slim-inverse-adjacent"},"Combined input field (slim, inverse, adjacent)"),Object(o.b)("h3",{id:"description-7"},"Description"),Object(o.b)("p",null,"For single input forms. Use where inputs are nested or constrained by layout."),Object(o.b)(l.c,{__position:16,__code:'<State initial={{ value: \'Text value\' }}>\n  {({ state, setState }) => (\n    <FormFieldCombinedInput\n      adjacent\n      {...state}\n      buttonLabel="Button"\n      labelText="Label"\n      id="combined-slim-inverse"\n      inverse\n      maxLength={30}\n      onChange={e => setState({ value: e.target.value })}\n      slim\n      placeholder="Text placeholder"\n    />\n  )}\n</State>',__scope:{props:this?this.props:n,Playground:l.c,Props:l.d,State:d.b,FormFieldCombinedInput:r.a},style:{backgroundColor:"#333",margin:"-2em",padding:"2em"},mdxType:"Playground"},Object(o.b)(d.b,{initial:{value:"Text value"},mdxType:"State"},(function(e){var t=e.state,n=e.setState;return Object(o.b)(r.a,Object(a.a)({adjacent:!0},t,{buttonLabel:"Button",labelText:"Label",id:"combined-slim-inverse",inverse:!0,maxLength:30,onChange:function(e){return n({value:e.target.value})},slim:!0,placeholder:"Text placeholder",mdxType:"FormFieldCombinedInput"}))}))),Object(o.b)("hr",null),Object(o.b)("h2",{id:"properties"},"Properties"),Object(o.b)(l.d,{of:r.a,mdxType:"Props"}))}s.isMDXComponent=!0}}]);
//# sourceMappingURL=common-components-forms-form-field-combined-input-docz.dc49e3d49d6b131c83f3.js.map