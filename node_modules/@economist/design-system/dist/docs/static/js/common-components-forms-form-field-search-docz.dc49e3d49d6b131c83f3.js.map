{"version":3,"sources":["/home/circleci/repo/src/common/components/forms/form-field-search.docz.mdx","/home/circleci/repo/src/common/components/forms/form-field-search.js"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","this","Playground","Props","State","FormFieldSearch","initial","value","state","setState","id","labelText","maxLength","onChange","e","target","placeholder","adjacent","style","backgroundColor","margin","padding","inverse","slim","of","isMDXComponent","disabled","name","otherProps","buttonLabel","xmlns","width","height","role","aria-labelledby","d","icon","defaultProps"],"mappings":"mpBAWMA,EAAc,GAIL,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YALS,UAKT,eAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,qBAAG,sBAAQC,WAAW,KAAnB,gBAAH,UACA,uBACA,iBAAQ,CACN,GAAM,gBADR,gBAGA,iBAAQ,CACN,GAAM,eADR,eAGA,wGACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,6SAAoTC,QAAS,CAC9VL,MAAOM,KAAOA,KAAKN,MAAQA,EAC3BO,eACAC,UACAC,UACAC,qBACCT,QAAQ,cACb,YAAC,IAAD,CAAOU,QAAS,CACVC,MAAO,IACNX,QAAQ,UACZ,gBACKY,EADL,EACKA,MACAC,EAFL,EAEKA,SAFL,OAGS,YAAC,IAAD,eAAqBD,EAArB,CAA4BE,GAAG,SAASC,UAAU,QAAQC,UAAW,GAAIC,SAAU,SAAAC,GAAC,OAAIL,EAAS,CACrGF,MAAOO,EAAEC,OAAOR,SACdS,YAAY,0BAA0BpB,QAAQ,yBAGtD,uBACA,iBAAQ,CACN,GAAM,yBADR,2BAGA,iBAAQ,CACN,GAAM,iBADR,eAGA,wGACA,qBAAG,sBAAQC,WAAW,KAAnB,mBAA2C,0BAAYA,WAAW,UAAvB,SAA3C,KAAuG,0BAAYA,WAAW,UAAvB,YAAvG,QAAyK,0BAAYA,WAAW,UAAvB,cAAzK,yEACH,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,sUAA6UC,QAAS,CACvXL,MAAOM,KAAOA,KAAKN,MAAQA,EAC3BO,eACAC,UACAC,UACAC,qBACCT,QAAQ,cACb,YAAC,IAAD,CAAOU,QAAS,CACVC,MAAO,IACNX,QAAQ,UACZ,gBACKY,EADL,EACKA,MACAC,EAFL,EAEKA,SAFL,OAGS,YAAC,IAAD,eAAqBD,EAArB,CAA4BS,UAAQ,EAACP,GAAG,kBAAkBC,UAAU,QAAQC,UAAW,GAAIC,SAAU,SAAAC,GAAC,OAAIL,EAAS,CACvHF,MAAOO,EAAEC,OAAOR,SACdS,YAAY,0BAA0BpB,QAAQ,yBAGtD,uBACA,iBAAQ,CACN,GAAM,wBADR,0BAGA,iBAAQ,CACN,GAAM,iBADR,eAGA,wGACA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,oUAA2UC,QAAS,CACrXL,MAAOM,KAAOA,KAAKN,MAAQA,EAC3BO,eACAC,UACAC,UACAC,qBACCa,MAAO,CACRC,gBAAiB,OACjBC,OAAQ,OACRC,QAAS,OACRzB,QAAQ,cACb,YAAC,IAAD,CAAOU,QAAS,CACVC,MAAO,IACNX,QAAQ,UACZ,gBACKY,EADL,EACKA,MACAC,EAFL,EAEKA,SAFL,OAGS,YAAC,IAAD,eAAqBD,EAArB,CAA4BE,GAAG,iBAAiBY,SAAO,EAACX,UAAU,QAAQC,UAAW,GAAIC,SAAU,SAAAC,GAAC,OAAIL,EAAS,CACrHF,MAAOO,EAAEC,OAAOR,SACdS,YAAY,0BAA0BpB,QAAQ,yBAGtD,uBACA,iBAAQ,CACN,GAAM,iCADR,oCAGA,iBAAQ,CACN,GAAM,iBADR,eAGA,wGACA,qBAAG,sBAAQC,WAAW,KAAnB,mBAA2C,0BAAYA,WAAW,UAAvB,SAA3C,KAAuG,0BAAYA,WAAW,UAAvB,YAAvG,QAAyK,0BAAYA,WAAW,UAAvB,cAAzK,yEACH,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,oVAA2VC,QAAS,CACrYL,MAAOM,KAAOA,KAAKN,MAAQA,EAC3BO,eACAC,UACAC,UACAC,qBACCa,MAAO,CACRC,gBAAiB,OACjBC,OAAQ,OACRC,QAAS,OACRzB,QAAQ,cACb,YAAC,IAAD,CAAOU,QAAS,CACVC,MAAO,IACNX,QAAQ,UACZ,gBACKY,EADL,EACKA,MACAC,EAFL,EAEKA,SAFL,OAGS,YAAC,IAAD,eAAqBD,EAArB,CAA4BE,GAAG,iBAAiBO,UAAQ,EAACK,SAAO,EAACX,UAAU,QAAQC,UAAW,GAAIC,SAAU,SAAAC,GAAC,OAAIL,EAAS,CAC9HF,MAAOO,EAAEC,OAAOR,SACdS,YAAY,0BAA0BpB,QAAQ,yBAGtD,uBACA,iBAAQ,CACN,GAAM,qBADR,uBAGA,iBAAQ,CACN,GAAM,iBADR,eAGA,+JAEA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,8TAAqUC,QAAS,CAC/WL,MAAOM,KAAOA,KAAKN,MAAQA,EAC3BO,eACAC,UACAC,UACAC,qBACCT,QAAQ,cACb,YAAC,IAAD,CAAOU,QAAS,CACVC,MAAO,IACNX,QAAQ,UACZ,gBACKY,EADL,EACKA,MACAC,EAFL,EAEKA,SAFL,OAGS,YAAC,IAAD,eAAqBD,EAArB,CAA4BE,GAAG,cAAcC,UAAU,QAAQC,UAAW,GAAIC,SAAU,SAAAC,GAAC,OAAIL,EAAS,CAC1GF,MAAOO,EAAEC,OAAOR,SACdS,YAAY,0BAA0BO,MAAI,EAAC3B,QAAQ,yBAG3D,uBACA,iBAAQ,CACN,GAAM,8BADR,iCAGA,iBAAQ,CACN,GAAM,iBADR,eAGA,+JAEA,qBAAG,sBAAQC,WAAW,KAAnB,mBAA2C,0BAAYA,WAAW,UAAvB,SAA3C,KAAuG,0BAAYA,WAAW,UAAvB,YAAvG,QAAyK,0BAAYA,WAAW,UAAvB,cAAzK,yEACH,YAAC,IAAD,CAAYC,WAAY,GAAIC,OAAQ,8UAAqVC,QAAS,CAChYL,MAAOM,KAAOA,KAAKN,MAAQA,EAC3BO,eACAC,UACAC,UACAC,qBACCT,QAAQ,cACb,YAAC,IAAD,CAAOU,QAAS,CACVC,MAAO,IACNX,QAAQ,UACZ,gBACKY,EADL,EACKA,MACAC,EAFL,EAEKA,SAFL,OAGS,YAAC,IAAD,eAAqBD,EAArB,CAA4BE,GAAG,cAAcC,UAAU,QAAQC,UAAW,GAAIC,SAAU,SAAAC,GAAC,OAAIL,EAAS,CAC1GF,MAAOO,EAAEC,OAAOR,SACdS,YAAY,0BAA0BO,MAAI,EAACN,UAAQ,EAACrB,QAAQ,yBAGpE,uBACA,iBAAQ,CACN,GAAM,6BADR,gCAGA,iBAAQ,CACN,GAAM,iBADR,eAGA,+JAEA,YAAC,IAAD,CAAYE,WAAY,GAAIC,OAAQ,qVAA4VC,QAAS,CACvYL,MAAOM,KAAOA,KAAKN,MAAQA,EAC3BO,eACAC,UACAC,UACAC,qBACCa,MAAO,CACRC,gBAAiB,OACjBC,OAAQ,OACRC,QAAS,OACRzB,QAAQ,cACb,YAAC,IAAD,CAAOU,QAAS,CACVC,MAAO,IACNX,QAAQ,UACZ,gBACKY,EADL,EACKA,MACAC,EAFL,EAEKA,SAFL,OAGS,YAAC,IAAD,eAAqBD,EAArB,CAA4BE,GAAG,sBAAsBY,SAAO,EAACC,MAAI,EAACZ,UAAU,QAAQC,UAAW,GAAIC,SAAU,SAAAC,GAAC,OAAIL,EAAS,CAC/HF,MAAOO,EAAEC,OAAOR,SACdS,YAAY,0BAA0BpB,QAAQ,yBAGtD,uBACA,iBAAQ,CACN,GAAM,sCADR,0CAGA,iBAAQ,CACN,GAAM,iBADR,eAGA,+JAEA,qBAAG,sBAAQC,WAAW,KAAnB,mBAA2C,0BAAYA,WAAW,UAAvB,SAA3C,KAAuG,0BAAYA,WAAW,UAAvB,YAAvG,QAAyK,0BAAYA,WAAW,UAAvB,cAAzK,yEACH,YAAC,IAAD,CAAYC,WAAY,GAAIC,OAAQ,qWAA4WC,QAAS,CACvZL,MAAOM,KAAOA,KAAKN,MAAQA,EAC3BO,eACAC,UACAC,UACAC,qBACCa,MAAO,CACRC,gBAAiB,OACjBC,OAAQ,OACRC,QAAS,OACRzB,QAAQ,cACb,YAAC,IAAD,CAAOU,QAAS,CACVC,MAAO,IACNX,QAAQ,UACZ,gBACKY,EADL,EACKA,MACAC,EAFL,EAEKA,SAFL,OAGS,YAAC,IAAD,eAAqBD,EAArB,CAA4BE,GAAG,sBAAsBY,SAAO,EAACC,MAAI,EAACN,UAAQ,EAACN,UAAU,QAAQC,UAAW,GAAIC,SAAU,SAAAC,GAAC,OAAIL,EAAS,CACxIF,MAAOO,EAAEC,OAAOR,SACdS,YAAY,0BAA0BpB,QAAQ,yBAGtD,uBACA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAO4B,GAAInB,IAAiBT,QAAQ,WAKxCH,EAAWgC,gBAAiB,G,sZCtQtBpB,EAAkB,SAAC,GAAD,IACtBY,EADsB,EACtBA,SACAS,EAFsB,EAEtBA,SACAhB,EAHsB,EAGtBA,GACAY,EAJsB,EAItBA,QACAX,EALsB,EAKtBA,UACAC,EANsB,EAMtBA,UACAe,EAPsB,EAOtBA,KACAd,EARsB,EAQtBA,SACAG,EATsB,EAStBA,YACAO,EAVsB,EAUtBA,KACAhB,EAXsB,EAWtBA,MACGqB,EAZmB,oIActB,oCACE,kBAAC,IAAD,aACEX,SAAUA,EACVY,YACE,yBACEC,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,KAAK,MACLC,kBAAA,UAAoBxB,EAApB,UAEA,2BAAOA,GAAE,UAAKA,EAAL,UAAT,UACA,0BAAMyB,EAAE,4MAGZT,SAAUA,EACVhB,GAAIA,EACJ0B,MAAI,EACJd,QAASA,EACTX,UAAWA,EACXC,UAAWA,EACXe,KAAMA,EACNd,SAAUA,EACVG,YAAaA,EACbO,KAAMA,EACNhB,MAAOA,GACHqB,MAKVvB,EAAgBgC,aAAe,CAC7BpB,SAAU,KACVS,UAAU,EACVhB,GAAI,SACJY,QAAS,KACTV,UAAW,KACXe,KAAM,GACNd,SAAU,KACVG,YAAa,IACbO,KAAM,KACNhB,MAAO,IAiBMF,M","file":"static/js/common-components-forms-form-field-search-docz.4ac11791.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Playground, Props } from 'docz'\nimport { State } from 'react-powerplug'\nimport FormFieldSearch from './form-field-search'\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"formfieldsearch\"\n    }}>{`FormFieldSearch`}</h1>\n    <p><strong parentName=\"p\">{`SUBCATEGORY:`}</strong>{` Forms`}</p>\n    <hr />\n    <h2 {...{\n      \"id\": \"search-field\"\n    }}>{`Search field`}</h2>\n    <h3 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h3>\n    <p>{`For single input search forms. Consider using \"Search\" text instead of an icon.`}</p>\n    <Playground __position={1} __code={'<State initial={{ value: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <FormFieldSearch\\n      {...state}\\n      id=\\\"search\\\"\\n      labelText=\\\"Label\\\"\\n      maxLength={30}\\n      onChange={e => setState({ value: e.target.value })}\\n      placeholder=\\\"Search text placeholder\\\"\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      FormFieldSearch\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ''\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <FormFieldSearch {...state} id='search' labelText=\"Label\" maxLength={30} onChange={e => setState({\n          value: e.target.value\n        })} placeholder='Search text placeholder' mdxType=\"FormFieldSearch\" />}\n  </State>\n    </Playground>\n    <hr />\n    <h2 {...{\n      \"id\": \"search-field-adjacent\"\n    }}>{`Search field (adjacent)`}</h2>\n    <h3 {...{\n      \"id\": \"description-1\"\n    }}>{`Description`}</h3>\n    <p>{`For single input search forms. Consider using \"Search\" text instead of an icon.`}</p>\n    <p><strong parentName=\"p\">{`Avoid including `}<inlineCode parentName=\"strong\">{`error`}</inlineCode>{`, `}<inlineCode parentName=\"strong\">{`labelTag`}</inlineCode>{` and `}<inlineCode parentName=\"strong\">{`helperText`}</inlineCode>{` props when using adjacent layout. Instead, use the standard layout.`}</strong></p>\n    <Playground __position={3} __code={'<State initial={{ value: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <FormFieldSearch\\n      {...state}\\n      adjacent\\n      id=\\\"search-adjacent\\\"\\n      labelText=\\\"Label\\\"\\n      maxLength={30}\\n      onChange={e => setState({ value: e.target.value })}\\n      placeholder=\\\"Search text placeholder\\\"\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      FormFieldSearch\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ''\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <FormFieldSearch {...state} adjacent id='search-adjacent' labelText=\"Label\" maxLength={30} onChange={e => setState({\n          value: e.target.value\n        })} placeholder='Search text placeholder' mdxType=\"FormFieldSearch\" />}\n  </State>\n    </Playground>\n    <hr />\n    <h2 {...{\n      \"id\": \"search-field-inverse\"\n    }}>{`Search field (inverse)`}</h2>\n    <h3 {...{\n      \"id\": \"description-2\"\n    }}>{`Description`}</h3>\n    <p>{`For single input search forms. Consider using \"Search\" text instead of an icon.`}</p>\n    <Playground __position={5} __code={'<State initial={{ value: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <FormFieldSearch\\n      {...state}\\n      id=\\\"search-inverse\\\"\\n      inverse\\n      labelText=\\\"Label\\\"\\n      maxLength={30}\\n      onChange={e => setState({ value: e.target.value })}\\n      placeholder=\\\"Search text placeholder\\\"\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      FormFieldSearch\n    }} style={{\n      backgroundColor: \"#333\",\n      margin: '-2em',\n      padding: '2em'\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ''\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <FormFieldSearch {...state} id='search-inverse' inverse labelText=\"Label\" maxLength={30} onChange={e => setState({\n          value: e.target.value\n        })} placeholder='Search text placeholder' mdxType=\"FormFieldSearch\" />}\n  </State>\n    </Playground>\n    <hr />\n    <h2 {...{\n      \"id\": \"search-field-inverse-adjacent\"\n    }}>{`Search field (inverse, adjacent)`}</h2>\n    <h3 {...{\n      \"id\": \"description-3\"\n    }}>{`Description`}</h3>\n    <p>{`For single input search forms. Consider using \"Search\" text instead of an icon.`}</p>\n    <p><strong parentName=\"p\">{`Avoid including `}<inlineCode parentName=\"strong\">{`error`}</inlineCode>{`, `}<inlineCode parentName=\"strong\">{`labelTag`}</inlineCode>{` and `}<inlineCode parentName=\"strong\">{`helperText`}</inlineCode>{` props when using adjacent layout. Instead, use the standard layout.`}</strong></p>\n    <Playground __position={7} __code={'<State initial={{ value: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <FormFieldSearch\\n      {...state}\\n      id=\\\"search-inverse\\\"\\n      adjacent\\n      inverse\\n      labelText=\\\"Label\\\"\\n      maxLength={30}\\n      onChange={e => setState({ value: e.target.value })}\\n      placeholder=\\\"Search text placeholder\\\"\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      FormFieldSearch\n    }} style={{\n      backgroundColor: \"#333\",\n      margin: '-2em',\n      padding: '2em'\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ''\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <FormFieldSearch {...state} id='search-inverse' adjacent inverse labelText=\"Label\" maxLength={30} onChange={e => setState({\n          value: e.target.value\n        })} placeholder='Search text placeholder' mdxType=\"FormFieldSearch\" />}\n  </State>\n    </Playground>\n    <hr />\n    <h2 {...{\n      \"id\": \"search-field-slim\"\n    }}>{`Search field (slim)`}</h2>\n    <h3 {...{\n      \"id\": \"description-4\"\n    }}>{`Description`}</h3>\n    <p>{`For single input search forms. Use where inputs are nested or constrained by layout.\nConsider using \"Search\" text instead of an icon.`}</p>\n    <Playground __position={9} __code={'<State initial={{ value: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <FormFieldSearch\\n      {...state}\\n      id=\\\"search-slim\\\"\\n      labelText=\\\"Label\\\"\\n      maxLength={30}\\n      onChange={e => setState({ value: e.target.value })}\\n      placeholder=\\\"Search text placeholder\\\"\\n      slim\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      FormFieldSearch\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ''\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <FormFieldSearch {...state} id='search-slim' labelText=\"Label\" maxLength={30} onChange={e => setState({\n          value: e.target.value\n        })} placeholder='Search text placeholder' slim mdxType=\"FormFieldSearch\" />}\n  </State>\n    </Playground>\n    <hr />\n    <h2 {...{\n      \"id\": \"search-field-slim-adjacent\"\n    }}>{`Search field (slim, adjacent)`}</h2>\n    <h3 {...{\n      \"id\": \"description-5\"\n    }}>{`Description`}</h3>\n    <p>{`For single input search forms. Use where inputs are nested or constrained by layout.\nConsider using \"Search\" text instead of an icon.`}</p>\n    <p><strong parentName=\"p\">{`Avoid including `}<inlineCode parentName=\"strong\">{`error`}</inlineCode>{`, `}<inlineCode parentName=\"strong\">{`labelTag`}</inlineCode>{` and `}<inlineCode parentName=\"strong\">{`helperText`}</inlineCode>{` props when using adjacent layout. Instead, use the standard layout.`}</strong></p>\n    <Playground __position={11} __code={'<State initial={{ value: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <FormFieldSearch\\n      {...state}\\n      id=\\\"search-slim\\\"\\n      labelText=\\\"Label\\\"\\n      maxLength={30}\\n      onChange={e => setState({ value: e.target.value })}\\n      placeholder=\\\"Search text placeholder\\\"\\n      slim\\n      adjacent\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      FormFieldSearch\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ''\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <FormFieldSearch {...state} id='search-slim' labelText=\"Label\" maxLength={30} onChange={e => setState({\n          value: e.target.value\n        })} placeholder='Search text placeholder' slim adjacent mdxType=\"FormFieldSearch\" />}\n  </State>\n    </Playground>\n    <hr />\n    <h2 {...{\n      \"id\": \"search-field-slim-inverse\"\n    }}>{`Search field (slim, inverse)`}</h2>\n    <h3 {...{\n      \"id\": \"description-6\"\n    }}>{`Description`}</h3>\n    <p>{`For single input search forms. Use where inputs are nested or constrained by layout.\nConsider using \"Search\" text instead of an icon.`}</p>\n    <Playground __position={13} __code={'<State initial={{ value: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <FormFieldSearch\\n      {...state}\\n      id=\\\"search-slim-inverse\\\"\\n      inverse\\n      slim\\n      labelText=\\\"Label\\\"\\n      maxLength={30}\\n      onChange={e => setState({ value: e.target.value })}\\n      placeholder=\\\"Search text placeholder\\\"\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      FormFieldSearch\n    }} style={{\n      backgroundColor: \"#333\",\n      margin: '-2em',\n      padding: '2em'\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ''\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <FormFieldSearch {...state} id='search-slim-inverse' inverse slim labelText=\"Label\" maxLength={30} onChange={e => setState({\n          value: e.target.value\n        })} placeholder='Search text placeholder' mdxType=\"FormFieldSearch\" />}\n  </State>\n    </Playground>\n    <hr />\n    <h2 {...{\n      \"id\": \"search-field-slim-inverse-adjacent\"\n    }}>{`Search field (slim, inverse, adjacent)`}</h2>\n    <h3 {...{\n      \"id\": \"description-7\"\n    }}>{`Description`}</h3>\n    <p>{`For single input search forms. Use where inputs are nested or constrained by layout.\nConsider using \"Search\" text instead of an icon.`}</p>\n    <p><strong parentName=\"p\">{`Avoid including `}<inlineCode parentName=\"strong\">{`error`}</inlineCode>{`, `}<inlineCode parentName=\"strong\">{`labelTag`}</inlineCode>{` and `}<inlineCode parentName=\"strong\">{`helperText`}</inlineCode>{` props when using adjacent layout. Instead, use the standard layout.`}</strong></p>\n    <Playground __position={15} __code={'<State initial={{ value: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <FormFieldSearch\\n      {...state}\\n      id=\\\"search-slim-inverse\\\"\\n      inverse\\n      slim\\n      adjacent\\n      labelText=\\\"Label\\\"\\n      maxLength={30}\\n      onChange={e => setState({ value: e.target.value })}\\n      placeholder=\\\"Search text placeholder\\\"\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      FormFieldSearch\n    }} style={{\n      backgroundColor: \"#333\",\n      margin: '-2em',\n      padding: '2em'\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ''\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <FormFieldSearch {...state} id='search-slim-inverse' inverse slim adjacent labelText=\"Label\" maxLength={30} onChange={e => setState({\n          value: e.target.value\n        })} placeholder='Search text placeholder' mdxType=\"FormFieldSearch\" />}\n  </State>\n    </Playground>\n    <hr />\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={FormFieldSearch} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FormFieldCombinedInput from './form-field-combined-input';\n\nconst FormFieldSearch = ({\n  adjacent,\n  disabled,\n  id,\n  inverse,\n  labelText,\n  maxLength,\n  name,\n  onChange,\n  placeholder,\n  slim,\n  value,\n  ...otherProps\n}) => (\n  <>\n    <FormFieldCombinedInput\n      adjacent={adjacent}\n      buttonLabel={\n        <svg\n          xmlns='http://www.w3.org/2000/svg'\n          width='24'\n          height='24'\n          role='img'\n          aria-labelledby={`${id}-icon`}\n        >\n          <title id={`${id}-icon`}>Search</title>\n          <path d='M15.5 14h-.79l-.28-.27A6.471 6.471 0 0016 9.5 6.5 6.5 0 109.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z' />\n        </svg>\n      }\n      disabled={disabled}\n      id={id}\n      icon\n      inverse={inverse}\n      labelText={labelText}\n      maxLength={maxLength}\n      name={name}\n      onChange={onChange}\n      placeholder={placeholder}\n      slim={slim}\n      value={value}\n      {...otherProps}\n    />\n  </>\n);\n\nFormFieldSearch.defaultProps = {\n  adjacent: null,\n  disabled: false,\n  id: 'search',\n  inverse: null,\n  maxLength: null,\n  name: '',\n  onChange: null,\n  placeholder: ' ',\n  slim: null,\n  value: '',\n};\n\nFormFieldSearch.propTypes = {\n  adjacent: PropTypes.bool,\n  disabled: PropTypes.bool,\n  id: PropTypes.string,\n  inverse: PropTypes.bool,\n  labelText: PropTypes.string.isRequired,\n  maxLength: PropTypes.number,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  placeholder: PropTypes.string,\n  slim: PropTypes.bool,\n  value: PropTypes.string,\n};\n\nexport default FormFieldSearch;\n"],"sourceRoot":""}