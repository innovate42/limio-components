{"version":3,"sources":["/home/circleci/repo/src/common/components/forms/form-field-combined-input.docz.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","this","Playground","Props","State","FormFieldCombinedInput","initial","value","state","setState","buttonLabel","id","labelText","maxLength","onChange","e","target","placeholder","error","adjacent","style","backgroundColor","margin","padding","inverse","slim","of","isMDXComponent"],"mappings":"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","file":"static/js/common-components-forms-form-field-combined-input-docz.7b403173.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Playground, Props } from 'docz'\nimport { State } from 'react-powerplug'\nimport FormFieldCombinedInput from './form-field-combined-input'\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"formfieldcombinedinput\"\n    }}>{`FormFieldCombinedInput`}</h1>\n    <p><strong parentName=\"p\">{`SUBCATEGORY:`}</strong>{` Forms`}</p>\n    <hr />\n    <h2 {...{\n      \"id\": \"combined-input-field\"\n    }}>{`Combined input field`}</h2>\n    <h3 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h3>\n    <p>{`For single input forms, such as search.`}</p>\n    <Playground __position={1} __code={'<State initial={{ value: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <FormFieldCombinedInput\\n      {...state}\\n      buttonLabel=\\\"Button\\\"\\n      id=\\\"combined\\\"\\n      labelText=\\\"Label\\\"\\n      maxLength={30}\\n      onChange={e => setState({ value: e.target.value })}\\n      placeholder=\\\"Text placeholder\\\"\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      FormFieldCombinedInput\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ''\n      }} mdxType=\"State\">\n  {({\n          state,\n          setState\n        }) => <FormFieldCombinedInput {...state} buttonLabel=\"Button\" id='combined' labelText=\"Label\" maxLength={30} onChange={e => setState({\n          value: e.target.value\n        })} placeholder='Text placeholder' mdxType=\"FormFieldCombinedInput\" />}\n      </State>\n    </Playground>\n    <p><strong parentName=\"p\">{`Validation`}</strong></p>\n    <Playground __position={2} __code={'<State initial={{ value: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <FormFieldCombinedInput\\n      {...state}\\n      buttonLabel=\\\"Button\\\"\\n      id=\\\"validation\\\"\\n      error=\\\"Notice\\\"\\n      labelText=\\\"Label\\\"\\n      maxLength={30}\\n      onChange={e => setState({ value: e.target.value })}\\n      placeholder=\\\"Text placeholder\\\"\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      FormFieldCombinedInput\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ''\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <FormFieldCombinedInput {...state} buttonLabel=\"Button\" id='validation' error=\"Notice\" labelText=\"Label\" maxLength={30} onChange={e => setState({\n          value: e.target.value\n        })} placeholder='Text placeholder' mdxType=\"FormFieldCombinedInput\" />}\n  </State>\n    </Playground>\n    <hr />\n    <h2 {...{\n      \"id\": \"combined-input-field-adjacent\"\n    }}>{`Combined input field (adjacent)`}</h2>\n    <h3 {...{\n      \"id\": \"description-1\"\n    }}>{`Description`}</h3>\n    <p>{`For single input forms, such as search.`}</p>\n    <p><strong parentName=\"p\">{`Avoid including `}<inlineCode parentName=\"strong\">{`error`}</inlineCode>{`, `}<inlineCode parentName=\"strong\">{`labelTag`}</inlineCode>{` and `}<inlineCode parentName=\"strong\">{`helperText`}</inlineCode>{` props when using adjacent layout. Instead, use the standard layout.`}</strong></p>\n    <Playground __position={4} __code={'<State initial={{ value: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <FormFieldCombinedInput\\n      {...state}\\n      adjacent\\n      buttonLabel=\\\"Button\\\"\\n      id=\\\"combined-adjacent\\\"\\n      labelText=\\\"Label\\\"\\n      maxLength={30}\\n      onChange={e => setState({ value: e.target.value })}\\n      placeholder=\\\"Text placeholder\\\"\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      FormFieldCombinedInput\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ''\n      }} mdxType=\"State\">\n  {({\n          state,\n          setState\n        }) => <FormFieldCombinedInput {...state} adjacent buttonLabel=\"Button\" id='combined-adjacent' labelText=\"Label\" maxLength={30} onChange={e => setState({\n          value: e.target.value\n        })} placeholder='Text placeholder' mdxType=\"FormFieldCombinedInput\" />}\n      </State>\n    </Playground>\n    <hr />\n    <h2 {...{\n      \"id\": \"combined-input-field-inverse\"\n    }}>{`Combined input field (inverse)`}</h2>\n    <h3 {...{\n      \"id\": \"description-2\"\n    }}>{`Description`}</h3>\n    <p>{`For single input forms, such as search.`}</p>\n    <Playground __position={6} __code={'<State initial={{ value: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <FormFieldCombinedInput\\n      {...state}\\n      id=\\\"combined-inverse\\\"\\n      buttonLabel=\\\"Button\\\"\\n      inverse\\n      labelText=\\\"Label\\\"\\n      maxLength={30}\\n      onChange={e => setState({ value: e.target.value })}\\n      placeholder=\\\"Text placeholder\\\"\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      FormFieldCombinedInput\n    }} style={{\n      backgroundColor: \"#333\",\n      margin: '-2em',\n      padding: '2em'\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ''\n      }} mdxType=\"State\">\n  {({\n          state,\n          setState\n        }) => <FormFieldCombinedInput {...state} id='combined-inverse' buttonLabel=\"Button\" inverse labelText=\"Label\" maxLength={30} onChange={e => setState({\n          value: e.target.value\n        })} placeholder='Text placeholder' mdxType=\"FormFieldCombinedInput\" />}\n      </State>\n    </Playground>\n    <hr />\n    <h2 {...{\n      \"id\": \"combined-input-field-inverse-adjacent\"\n    }}>{`Combined input field (inverse, adjacent)`}</h2>\n    <h3 {...{\n      \"id\": \"description-3\"\n    }}>{`Description`}</h3>\n    <p>{`For single input forms, such as search.`}</p>\n    <p><strong parentName=\"p\">{`Avoid including `}<inlineCode parentName=\"strong\">{`error`}</inlineCode>{`, `}<inlineCode parentName=\"strong\">{`labelTag`}</inlineCode>{` and `}<inlineCode parentName=\"strong\">{`helperText`}</inlineCode>{` props when using adjacent layout. Instead, use the standard layout.`}</strong></p>\n    <Playground __position={8} __code={'<State initial={{ value: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <FormFieldCombinedInput\\n      adjacent\\n      {...state}\\n      id=\\\"combined-inverse\\\"\\n      buttonLabel=\\\"Button\\\"\\n      inverse\\n      labelText=\\\"Label\\\"\\n      maxLength={30}\\n      onChange={e => setState({ value: e.target.value })}\\n      placeholder=\\\"Text placeholder\\\"\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      FormFieldCombinedInput\n    }} style={{\n      backgroundColor: \"#333\",\n      margin: '-2em',\n      padding: '2em'\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ''\n      }} mdxType=\"State\">\n  {({\n          state,\n          setState\n        }) => <FormFieldCombinedInput adjacent {...state} id='combined-inverse' buttonLabel=\"Button\" inverse labelText=\"Label\" maxLength={30} onChange={e => setState({\n          value: e.target.value\n        })} placeholder='Text placeholder' mdxType=\"FormFieldCombinedInput\" />}\n      </State>\n    </Playground>\n    <hr />\n    <h2 {...{\n      \"id\": \"combined-input-field-slim\"\n    }}>{`Combined input field (slim)`}</h2>\n    <h3 {...{\n      \"id\": \"description-4\"\n    }}>{`Description`}</h3>\n    <p>{`For single input forms. Use where inputs are nested or constrained by layout.`}</p>\n    <Playground __position={10} __code={'<State initial={{ value: \\'Text value\\' }}>\\n  {({ state, setState }) => (\\n    <FormFieldCombinedInput\\n      {...state}\\n      id=\\\"combined-slim\\\"\\n      buttonLabel=\\\"Button\\\"\\n      labelText=\\\"Label\\\"\\n      maxLength={30}\\n      onChange={e => setState({ value: e.target.value })}\\n      slim\\n      placeholder=\\\"Text placeholder\\\"\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      FormFieldCombinedInput\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: 'Text value'\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <FormFieldCombinedInput {...state} id='combined-slim' buttonLabel=\"Button\" labelText=\"Label\" maxLength={30} onChange={e => setState({\n          value: e.target.value\n        })} slim placeholder='Text placeholder' mdxType=\"FormFieldCombinedInput\" />}\n  </State>\n    </Playground>\n    <hr />\n    <h2 {...{\n      \"id\": \"combined-input-field-slim-adjacent\"\n    }}>{`Combined input field (slim, adjacent)`}</h2>\n    <h3 {...{\n      \"id\": \"description-5\"\n    }}>{`Description`}</h3>\n    <p>{`For single input forms. Use where inputs are nested or constrained by layout.`}</p>\n    <Playground __position={12} __code={'<State initial={{ value: \\'Text value\\' }}>\\n  {({ state, setState }) => (\\n    <FormFieldCombinedInput\\n      adjacent\\n      {...state}\\n      id=\\\"combined-slim\\\"\\n      buttonLabel=\\\"Button\\\"\\n      labelText=\\\"Label\\\"\\n      maxLength={30}\\n      onChange={e => setState({ value: e.target.value })}\\n      slim\\n      placeholder=\\\"Text placeholder\\\"\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      FormFieldCombinedInput\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: 'Text value'\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <FormFieldCombinedInput adjacent {...state} id='combined-slim' buttonLabel=\"Button\" labelText=\"Label\" maxLength={30} onChange={e => setState({\n          value: e.target.value\n        })} slim placeholder='Text placeholder' mdxType=\"FormFieldCombinedInput\" />}\n  </State>\n    </Playground>\n    <hr />\n    <h2 {...{\n      \"id\": \"combined-input-field-slim-inverse\"\n    }}>{`Combined input field (slim, inverse)`}</h2>\n    <h3 {...{\n      \"id\": \"description-6\"\n    }}>{`Description`}</h3>\n    <p>{`For single input forms. Use where inputs are nested or constrained by layout.`}</p>\n    <Playground __position={14} __code={'<State initial={{ value: \\'Text value\\' }}>\\n  {({ state, setState }) => (\\n    <FormFieldCombinedInput\\n      {...state}\\n      buttonLabel=\\\"Button\\\"\\n      labelText=\\\"Label\\\"\\n      id=\\\"combined-slim-inverse\\\"\\n      inverse\\n      maxLength={30}\\n      onChange={e => setState({ value: e.target.value })}\\n      slim\\n      placeholder=\\\"Text placeholder\\\"\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      FormFieldCombinedInput\n    }} style={{\n      backgroundColor: \"#333\",\n      margin: '-2em',\n      padding: '2em'\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: 'Text value'\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <FormFieldCombinedInput {...state} buttonLabel=\"Button\" labelText=\"Label\" id='combined-slim-inverse' inverse maxLength={30} onChange={e => setState({\n          value: e.target.value\n        })} slim placeholder='Text placeholder' mdxType=\"FormFieldCombinedInput\" />}\n  </State>\n    </Playground>\n    <hr />\n    <h2 {...{\n      \"id\": \"combined-input-field-slim-inverse-adjacent\"\n    }}>{`Combined input field (slim, inverse, adjacent)`}</h2>\n    <h3 {...{\n      \"id\": \"description-7\"\n    }}>{`Description`}</h3>\n    <p>{`For single input forms. Use where inputs are nested or constrained by layout.`}</p>\n    <Playground __position={16} __code={'<State initial={{ value: \\'Text value\\' }}>\\n  {({ state, setState }) => (\\n    <FormFieldCombinedInput\\n      adjacent\\n      {...state}\\n      buttonLabel=\\\"Button\\\"\\n      labelText=\\\"Label\\\"\\n      id=\\\"combined-slim-inverse\\\"\\n      inverse\\n      maxLength={30}\\n      onChange={e => setState({ value: e.target.value })}\\n      slim\\n      placeholder=\\\"Text placeholder\\\"\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      FormFieldCombinedInput\n    }} style={{\n      backgroundColor: \"#333\",\n      margin: '-2em',\n      padding: '2em'\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: 'Text value'\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <FormFieldCombinedInput adjacent {...state} buttonLabel=\"Button\" labelText=\"Label\" id='combined-slim-inverse' inverse maxLength={30} onChange={e => setState({\n          value: e.target.value\n        })} slim placeholder='Text placeholder' mdxType=\"FormFieldCombinedInput\" />}\n  </State>\n    </Playground>\n    <hr />\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={FormFieldCombinedInput} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}